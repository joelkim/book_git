[
  {
    "objectID": "template.html",
    "href": "template.html",
    "title": "장 제목",
    "section": "",
    "text": "Building Git, Ch. 13 Branching Out\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A1460%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D\n%%{\ninit: {\n   \"gitGraph\": {\n      \"rotateCommitLabel\": false\n   },\n   \"themeVariables\": {\n      \"commitLabelColor\": '#000000',\n      \"commitLabelBackground\": '#ffffff',\n      \"commitLabelFontSize\": '15px'\n   }\n}}%%\ngitGraph\n  commit id: \"c1\"\n  commit id: \"c2\"\n  branch b1\n  commit id: \"c3\"\n  checkout main\n  commit id: \"c4\"\n  merge b1\n  checkout b1\n  branch b2\n  commit id: \"b2 브랜치 말단 커밋\"\n  checkout b1\n  commit id: \"b1 브랜치 말단 커밋\"\n  checkout main\n  commit id: \"main 브랜치 말단 커밋\""
  },
  {
    "objectID": "template.html#참고-문헌",
    "href": "template.html#참고-문헌",
    "title": "장 제목",
    "section": "",
    "text": "Building Git, Ch. 13 Branching Out\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A1460%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D"
  },
  {
    "objectID": "template.html#실습",
    "href": "template.html#실습",
    "title": "장 제목",
    "section": "실습",
    "text": "실습\n\n!rm -rf test_template_01\n!mkdir test_template_01\n!git init test_template_01\n!cd test_template_01\n\n\n\nInitialized empty Git repository in /test_template_01/.git/\n\n\n\n%cd /Users/joelkim/Work/personal/book_git/temp\n!rm -rf test_template_01"
  },
  {
    "objectID": "remote_diverged.html",
    "href": "remote_diverged.html",
    "title": "원격 발산 상태",
    "section": "",
    "text": "같은 브랜치의 로컬 버전과 원격 버전에 서로 다른 커밋이 들어가서 달라진 상태\n원격 브랜치에 다른 사람이 커밋 또는 머지를 했는데 이를 로컬에 반영하지 않은 상태에서 커밋을 해 버려서 발생\n\n\n\n\n\n\n%%{\ninit: {\n   \"gitGraph\": {\n      \"mainBranchName\": \"origin/main\",\n      \"rotateCommitLabel\": false\n   },\n   \"themeVariables\": {\n      \"commitLabelColor\": '#000000',\n      \"commitLabelBackground\": '#ffffff',\n      \"commitLabelFontSize\": '15px'\n   }\n}}%%\ngitGraph\n  commit id:\"c0\"\n  branch \"main\"\n  checkout \"main\"\n  commit id:\"c1\"\n  checkout \"origin/main\"\n  commit id:\"c2\"",
    "crumbs": [
      "사용자용 기초",
      "원격 발산 상태"
    ]
  },
  {
    "objectID": "remote_diverged.html#원격-발산-상태-remote-diverged",
    "href": "remote_diverged.html#원격-발산-상태-remote-diverged",
    "title": "원격 발산 상태",
    "section": "",
    "text": "같은 브랜치의 로컬 버전과 원격 버전에 서로 다른 커밋이 들어가서 달라진 상태\n원격 브랜치에 다른 사람이 커밋 또는 머지를 했는데 이를 로컬에 반영하지 않은 상태에서 커밋을 해 버려서 발생\n\n\n\n\n\n\n%%{\ninit: {\n   \"gitGraph\": {\n      \"mainBranchName\": \"origin/main\",\n      \"rotateCommitLabel\": false\n   },\n   \"themeVariables\": {\n      \"commitLabelColor\": '#000000',\n      \"commitLabelBackground\": '#ffffff',\n      \"commitLabelFontSize\": '15px'\n   }\n}}%%\ngitGraph\n  commit id:\"c0\"\n  branch \"main\"\n  checkout \"main\"\n  commit id:\"c1\"\n  checkout \"origin/main\"\n  commit id:\"c2\"",
    "crumbs": [
      "사용자용 기초",
      "원격 발산 상태"
    ]
  },
  {
    "objectID": "remote_diverged.html#원격-발산-상태의-예방",
    "href": "remote_diverged.html#원격-발산-상태의-예방",
    "title": "원격 발산 상태",
    "section": "원격 발산 상태의 예방",
    "text": "원격 발산 상태의 예방\n\n로컬 브랜치에 커밋하기 전에 원격 브랜치를 로컬에 반영하는 작업을 하면 발생 확률을 줄일 수 있음",
    "crumbs": [
      "사용자용 기초",
      "원격 발산 상태"
    ]
  },
  {
    "objectID": "remote_diverged.html#원격-발산-상태의-해결",
    "href": "remote_diverged.html#원격-발산-상태의-해결",
    "title": "원격 발산 상태",
    "section": "원격 발산 상태의 해결",
    "text": "원격 발산 상태의 해결\n\n해결 방법\n\n로컬 브랜치의 작업을 백업한 후 로컬 브랜치에서 없애고 원격 브랜치 내용을 그대로 반영\n로컬 브랜치에서 원격 브랜치를 머지하여 다시 원격 브랜치에 반영\n로컬 브랜치에서 원격 브랜치를 리베이스하여 다시 원격 브랜치에 반영\n\n재분기\n\n어떤 해결 방법을 사용하더라도 해결 작업을 하는 사이에 원격 브랜치에 새 커밋이 들어오면 다시 해야 함",
    "crumbs": [
      "사용자용 기초",
      "원격 발산 상태"
    ]
  },
  {
    "objectID": "remote_diverged.html#발산-상태-재발생",
    "href": "remote_diverged.html#발산-상태-재발생",
    "title": "원격 발산 상태",
    "section": "발산 상태 재발생",
    "text": "발산 상태 재발생\n\n어떤 예방 또는 해결 방법을 사용해도 발산 상태는 재발생할 수 있음\n\n예방 또는 해결 작업을 하는 그 짧은 시간동안 다른 사람이 원격 브랜치에 다시 새 커밋을 하면 다시 발산 상태가 됨\n근본적으로는 개발자간 커뮤니케이션을 통해 해결해야 함",
    "crumbs": [
      "사용자용 기초",
      "원격 발산 상태"
    ]
  },
  {
    "objectID": "merge.html",
    "href": "merge.html",
    "title": "머지",
    "section": "",
    "text": "Building Git, Ch. 17 Basic Merging\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf",
    "crumbs": [
      "사용자용 기초",
      "머지"
    ]
  },
  {
    "objectID": "merge.html#참고-문헌",
    "href": "merge.html#참고-문헌",
    "title": "머지",
    "section": "",
    "text": "Building Git, Ch. 17 Basic Merging\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf",
    "crumbs": [
      "사용자용 기초",
      "머지"
    ]
  },
  {
    "objectID": "merge.html#머지란",
    "href": "merge.html#머지란",
    "title": "머지",
    "section": "머지란",
    "text": "머지란",
    "crumbs": [
      "사용자용 기초",
      "머지"
    ]
  },
  {
    "objectID": "indexfile.html",
    "href": "indexfile.html",
    "title": "인덱스 파일",
    "section": "",
    "text": "Pro Git, Git Internels, Git Objects\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Progit/progit.pdf#%5B%7B%22num%22%3A2221%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C0%2C510.57%2Cnull%5D\n\nMastering Git, Ch.10 Keeping History Clean, An introduction to Git internals\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Narebski/2024%20-%20Narebski%20-%20Mastering%20Git,%202nd%20Edition.pdf#p263\n\nBuilding Git, Ch.6 The index\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A524%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#참고-문헌",
    "href": "indexfile.html#참고-문헌",
    "title": "인덱스 파일",
    "section": "",
    "text": "Pro Git, Git Internels, Git Objects\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Progit/progit.pdf#%5B%7B%22num%22%3A2221%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C0%2C510.57%2Cnull%5D\n\nMastering Git, Ch.10 Keeping History Clean, An introduction to Git internals\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Narebski/2024%20-%20Narebski%20-%20Mastering%20Git,%202nd%20Edition.pdf#p263\n\nBuilding Git, Ch.6 The index\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A524%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#git-기본-명령의-내부-구조",
    "href": "indexfile.html#git-기본-명령의-내부-구조",
    "title": "인덱스 파일",
    "section": "git 기본 명령의 내부 구조",
    "text": "git 기본 명령의 내부 구조\n\nadd, commit 등의 명령으로 파일이 등록되는 과정은 내부적으로 다음과 같은 고급 명령을 사용한다.\n이 중심에는 인덱스 파일이 있다.\n\n\n\n\n\n\n\n\n\n\n순번\ngit 명령\n내부 동작\n설명\n\n\n\n\n1\ngit add\n블롭 객체 생성\ngit hash-object 명령으로 블롭 객체 생성\n\n\n2\n-\n인덱스 등록\ngit update-index 명령으로 인덱스 파일에 스테이징 정보 등록\n\n\n3\ngit commit\n트리 객체 생성\ngit write-tree 명령으로 인덱스 파일정보를 이용하여 트리 객체 생성\n\n\n4\n-\n커밋 객체 생성\ngit commit-tree 명령으로 커밋 객체 생성\n\n\n5\n-\n브랜치 갱신\ngit update-ref 명령으로 브랜치 정보 갱신",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-1-레포지토리-준비",
    "href": "indexfile.html#실습-1-레포지토리-준비",
    "title": "인덱스 파일",
    "section": "실습 1: 레포지토리 준비",
    "text": "실습 1: 레포지토리 준비\n\n레포지토리 생성\n\n\ncd $HOME/lab\nrm -rf test_internal_02\ngit init test_internal_02\ncd test_internal_02\n\n\n\nInitialized empty Git repository in ~/lab/test_internal_02/.git/\n\n\n\ntree .git/objects\n\n.git/objects\n├── info\n└── pack\n\n3 directories, 0 files",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#hash-object-명령",
    "href": "indexfile.html#hash-object-명령",
    "title": "인덱스 파일",
    "section": "hash-object 명령",
    "text": "hash-object 명령\n\nhash-object 명령은 입력된 데이터를 이용하여 해시값을 계산하고 객체를 생성한다.\n-w 옵션을 주지 않으면 단순히 해시값만 계산한다.\n\ngit hash-object [옵션] 입력파일 경로\n\nhash-object 명령의 옵션\n\n-t &lt;유형&gt;\n\n생성할 객체 유형을 지정\n기본값: “blob”\n가능한 값: “commit”, “tree”, “blob”, “tag”",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-2-파일의-블롭-객체-생성",
    "href": "indexfile.html#실습-2-파일의-블롭-객체-생성",
    "title": "인덱스 파일",
    "section": "실습 2: 파일의 블롭 객체 생성",
    "text": "실습 2: 파일의 블롭 객체 생성\n\necho \"file1 line1\" &gt; file1.txt\n\n\ngit status\n\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file1.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\nhash-object 명령으로 file1.txt 파일에 대한 해시값을 계산\n\n\ngit hash-object file1.txt\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401\n\n\n\n-w 옵션이 없어서 실재로 블롭객체 파일을 생성하지 않음\n\n\ntree .git/objects\n\n.git/objects\n├── info\n└── pack\n\n3 directories, 0 files\n\n\n\n-w 옵션을 주면 실재로 블롭객체 파일을 생성함\n\n\ngit hash-object -w file1.txt\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401\n\n\n\ntree .git/objects\n\n.git/objects\n├── 0b\n│   └── 11cfca50e35a4865e8505f1a108bd23a3f9401\n├── info\n└── pack\n\n4 directories, 1 file\n\n\n\ncat-file 명령으로 블롭객체의 내용을 읽을 수 있음\n\n\ngit cat-file -p 0b11cfca50e35a4865e8505f1a108bd23a3f9401\n\nfile1 line1",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#인덱스-파일",
    "href": "indexfile.html#인덱스-파일",
    "title": "인덱스 파일",
    "section": "인덱스 파일",
    "text": "인덱스 파일\n\n인덱스 파일은 다음과 같은 정보를 저장하고 제공하는 바이너리 파일\n\n스테이지와 헤드 커밋에 있는 파일의 메타 정보\n\n파일의 블롭 객체에 대한 포인터\n해당 파일의 워크트리 파일 버전의 최신 변경 시간 등에 대한 정보\n\n\nadd 명령을 실행하면\n\n스테이지에 올라간 파일의 블롭 객체를 생성하고\n해당 파일에 대한 메타정보를 인덱스 파일에 등록한다.",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#update-index-명령",
    "href": "indexfile.html#update-index-명령",
    "title": "인덱스 파일",
    "section": "update-index 명령",
    "text": "update-index 명령\n\nhash-object 명령은 객체를 만들 뿐이지 스테이지에 넣지는 않는다.\n스테이지에 객체를 넣는 것은 update-index 명령을 사용한다.\nupdate-index 명령은 파일의 메타정보와 내용을 인덱스 파일에 등록한다.\n실행시에 인덱스 파일이 없으면 새로 생성한다.\n\n\nupdate-index 명령의 옵션\n\n-add &lt;유형&gt;\n\n인덱스 파일에 파일의 블롭객체를 등록\n–cacheinfo 옵션이 없으면 블롭객체를 직접 생성함\n\n--cacheinfo &lt;모드&gt; &lt;파일의 블롭객체의 해시값&gt; &lt;파일 경로&gt;\n\n이미 생성된 블롭객체가 존재할 경우 직접 인덱스 파일에 직접 등록\n\n--refresh\n\n파일 경로 정보를 이용하여 실제 파일에 대해 stat() 시스템 콜을 호출\n인덱스 파일의 엔트리 헤더(메타정보)가 stat() 시스템 콜 결과와 다르면 갱신\n블롭객체는 건들지 않는다.",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-3-인덱스-파일-생성",
    "href": "indexfile.html#실습-3-인덱스-파일-생성",
    "title": "인덱스 파일",
    "section": "실습 3: 인덱스 파일 생성",
    "text": "실습 3: 인덱스 파일 생성\n\n아직 .git/index 파일이 존재하지 않음\n\n\nls -al .git\n\ntotal 24\ndrwxr-xr-x@  9 joelkim  staff  288 Aug 31 20:04 .\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 31 20:04 ..\n-rw-r--r--@  1 joelkim  staff  137 Aug 31 20:04 config\n-rw-r--r--@  1 joelkim  staff   73 Aug 31 20:04 description\n-rw-r--r--@  1 joelkim  staff   21 Aug 31 20:04 HEAD\ndrwxr-xr-x@ 16 joelkim  staff  512 Aug 31 20:04 hooks\ndrwxr-xr-x@  3 joelkim  staff   96 Aug 31 20:04 info\ndrwxr-xr-x@  5 joelkim  staff  160 Aug 31 20:04 objects\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 31 20:04 refs\n\n\n\n아까 생성한 블롭 객체를 등록\n\n\ngit update-index --add --cacheinfo 100644 0b11cfca50e35a4865e8505f1a108bd23a3f9401 file1.txt\n\n\n.git/index 인덱스 파일이 생성됨\n\n\nls -al .git\n\ntotal 32\ndrwxr-xr-x@ 10 joelkim  staff  320 Aug 31 20:04 .\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 31 20:04 ..\n-rw-r--r--@  1 joelkim  staff  137 Aug 31 20:04 config\n-rw-r--r--@  1 joelkim  staff   73 Aug 31 20:04 description\n-rw-r--r--@  1 joelkim  staff   21 Aug 31 20:04 HEAD\ndrwxr-xr-x@ 16 joelkim  staff  512 Aug 31 20:04 hooks\n-rw-r--r--@  1 joelkim  staff  104 Aug 31 20:04 index\ndrwxr-xr-x@  3 joelkim  staff   96 Aug 31 20:04 info\ndrwxr-xr-x@  5 joelkim  staff  160 Aug 31 20:04 objects\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 31 20:04 refs\n\n\n\n인덱스 파일의 내용\n\n\nhexdump -C .git/index\n\n00000000  44 49 52 43 00 00 00 02  00 00 00 01 00 00 00 00  |DIRC............|\n00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000020  00 00 00 00 00 00 81 a4  00 00 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 0b 11 cf ca  50 e3 5a 48 65 e8 50 5f  |........P.ZHe.P_|\n00000040  1a 10 8b d2 3a 3f 94 01  00 09 66 69 6c 65 31 2e  |....:?....file1.|\n00000050  74 78 74 00 35 4c 42 43  60 45 a6 f6 87 b3 31 4e  |txt.5LBC`E....1N|\n00000060  84 73 b8 e3 b9 75 79 c3                           |.s...uy.|\n00000068\n\n\n\n인덱스 항목 중 워크트리의 메타 정보에 해당하는 헤더 정보가 빠져있음. update-index –refresh 명령으로 갱신\n\n\ngit update-index --refresh\n\n\nhexdump -C .git/index\n\n00000000  44 49 52 43 00 00 00 02  00 00 00 01 68 b4 2c 27  |DIRC........h.,'|\n00000010  0d 58 cd a0 68 b4 2c 27  0d 58 cd a0 01 00 00 04  |.X..h.,'.X......|\n00000020  09 67 9e e3 00 00 81 a4  00 00 01 f6 00 00 00 14  |.g..............|\n00000030  00 00 00 0c 0b 11 cf ca  50 e3 5a 48 65 e8 50 5f  |........P.ZHe.P_|\n00000040  1a 10 8b d2 3a 3f 94 01  00 09 66 69 6c 65 31 2e  |....:?....file1.|\n00000050  74 78 74 00 c5 4d ba 8b  75 2c 2b 78 d6 91 b5 28  |txt..M..u,+x...(|\n00000060  60 63 a7 75 7d 52 89 33                           |`c.u}R.3|\n00000068",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#인덱스-파일의-구조",
    "href": "indexfile.html#인덱스-파일의-구조",
    "title": "인덱스 파일",
    "section": "인덱스 파일의 구조",
    "text": "인덱스 파일의 구조\n\n구조\n\n인덱스 파일 헤더 (12 바이트)\n파일에 대한 인덱스 항목들 (가변)\n확장 영역 (가변)\n\n트리 항목 (커밋이 존재하는 경우)\n\n체크섬 (20 바이트)\n\n인덱스 파일 헤더\n\n총 12 바이트\n4바이트 시그너쳐 (‘D’, ‘I’, ‘R’, ‘C’) (“dircache”를 뜻함)\n4바이트 버전숫자 (2~4 중 하나)\n32비트 인덱스 엔트리 갯수\n\n헤더 예시\n\n44 49 52 43 00 00 00 02  00 00 00 01\nDIRC, 버전 2, 1개 엔트리\n00000000  44 49 52 43 00 00 00 02  00 00 00 01 00 00 00 00  |DIRC............|\n\n인덱스 항목 구성\n\n항목 헤더 (파일의 생성일자, 모드, 크기 등 메타정보)\n블롭객체 해시값 (파일의 내용)\n플래그 + 파일 이름\n엔트리 항목 해시값\n\n항목 헤더 (40 바이트)\n\n32 비트 ctime 초 (파일 메터메이터가 최종 변경된 시간)\n32 비트 ctime 나노초\n32 비트 mtime 초 (파일 본문 데이터가 최종 변경된 시간)\n32 비트 mtime 나노초\n32 비트 dev\n32 비트 inode 아이디\n32 비트 모드\n32 비트 uid\n32 비트 gid\n32 비트 파일 크기\n\n00000000  __ __ __ __ __ __ __ __  __ __ __ __ 68 b2 47 74  |            h.Gt|\n00000010  01 6c 0f fd 68 b2 47 74  01 6c 0f fd 01 00 00 04  |.l..h.Gt.l......|\n00000020  09 65 a3 68 00 00 81 a4  00 00 01 f6 00 00 00 14  |.e.h............|\n00000030  00 00 00 0c __ __ __ __  __ __ __ __ __ __ __ __  |....            |\n객체 해시값\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401\n\n00000030  __ __ __ __ 0b 11 cf ca  50 e3 5a 48 65 e8 50 5f  |........P.ZHe.P_|\n00000040  1a 10 8b d2 3a 3f 94 01  __ __ __ __ __ __ __ __  |....:?.         |\n플래그(2 바이트) + 파일 이름(8 바이트 배수로 패딩)\n00000040  __ __ __ __ __ __ __ __  00 09 66 69 6c 65 31 2e  |.       ..file1.|\n00000050  74 78 74 00 __ __ __ __  __ __ __ __ __ __ __ __  |txt.            |\n20 바이트 체크섬\n00000050  __ __ __ __ 8c 8e e0 4a  cb ef 63 04 81 44 a6 22  |    ...J..c..D.\"|\n00000060  8f cd 09 a2 39 cb 45 1c                           |....9.E.|\n\n\nls-files 명령\n\nls-files 명령은 워크트리와 스테이지, 커밋 내부의 파일 목록을 보여주는 명령\n워크트리의 파일 목록은 실시간으로 검색하지만\n스테이지와 커밋 파일 목록을 찾을 때 내부적으로 인덱스 파일을 사용함\n\n\n\nls-files 명령의 옵션\n\n-c\n\n인덱스 파일의 항목 출력\n즉, 추적 상태인 파일 목록 출력\n아무 옵션이 없는 상태와 동일한 결과\n\n--stage, -s\n\n스테이지 영역의 파일만 출력\n\n--others, -o\n\n비추적 상태의 파일 목록 출력\n\n--ignored, -i\n\n무시되고 있는 파일 목록 출력\n반드시 -o 옵션과 같이 사용해야 함\n\n--debug\n\n메타 정보까지 출력",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-4-파일-목록-출력",
    "href": "indexfile.html#실습-4-파일-목록-출력",
    "title": "인덱스 파일",
    "section": "실습 4: 파일 목록 출력",
    "text": "실습 4: 파일 목록 출력\n\n아직 추적되지 않는 신규 파일 생성\n\n\nmkdir sub\necho \"file2 line1\" &gt; sub/file2.txt\n\n\ntree .\n\n.\n├── file1.txt\n└── sub\n    └── file2.txt\n\n2 directories, 2 files\n\n\n\n추적 상태의 파일 (스테이지 + 커밋)\n\n\ngit ls-files\n\nfile1.txt\n\n\n\n스테이지 파일\n\n\ngit ls-files -s\n\n100644 0b11cfca50e35a4865e8505f1a108bd23a3f9401 0   file1.txt\n\n\n\n메타 정보 포함\n\n\ngit ls-files --debug\n\nfile1.txt\n  ctime: 1756638247:223923616\n  mtime: 1756638247:223923616\n  dev: 16777220 ino: 157785827\n  uid: 502  gid: 20\n  size: 12  flags: 0\n\n\n\n비추적 상태의 파일\n\n\ngit ls-files -o\n\nsub/file2.txt",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-5-다른-파일을-스테이지에-추가",
    "href": "indexfile.html#실습-5-다른-파일을-스테이지에-추가",
    "title": "인덱스 파일",
    "section": "실습 5: 다른 파일을 스테이지에 추가",
    "text": "실습 5: 다른 파일을 스테이지에 추가\n\ngit hash-object -w sub/file2.txt\n\n4a8d995103b41f561e547ce3b32e1983d424da22\n\n\n\ntree .git/objects\n\n.git/objects\n├── 0b\n│   └── 11cfca50e35a4865e8505f1a108bd23a3f9401\n├── 4a\n│   └── 8d995103b41f561e547ce3b32e1983d424da22\n├── info\n└── pack\n\n5 directories, 2 files\n\n\n\ngit update-index --add --cacheinfo 100644 4a8d995103b41f561e547ce3b32e1983d424da22 sub/file2.txt\n\n\ngit update-index --refresh\n\n\nhexdump -C .git/index\n\n00000000  44 49 52 43 00 00 00 02  00 00 00 02 68 b4 2c 27  |DIRC........h.,'|\n00000010  0d 58 cd a0 68 b4 2c 27  0d 58 cd a0 01 00 00 04  |.X..h.,'.X......|\n00000020  09 67 9e e3 00 00 81 a4  00 00 01 f6 00 00 00 14  |.g..............|\n00000030  00 00 00 0c 0b 11 cf ca  50 e3 5a 48 65 e8 50 5f  |........P.ZHe.P_|\n00000040  1a 10 8b d2 3a 3f 94 01  00 09 66 69 6c 65 31 2e  |....:?....file1.|\n00000050  74 78 74 00 68 b4 2c 28  37 9b 9d 13 68 b4 2c 28  |txt.h.,(7...h.,(|\n00000060  37 9b 9d 13 01 00 00 04  09 67 9e ed 00 00 81 a4  |7........g......|\n00000070  00 00 01 f6 00 00 00 14  00 00 00 0c 4a 8d 99 51  |............J..Q|\n00000080  03 b4 1f 56 1e 54 7c e3  b3 2e 19 83 d4 24 da 22  |...V.T|......$.\"|\n00000090  00 0d 73 75 62 2f 66 69  6c 65 32 2e 74 78 74 00  |..sub/file2.txt.|\n000000a0  00 00 00 00 14 5e 1b 92  d8 ca 60 b7 12 85 02 3f  |.....^....`....?|\n000000b0  b6 21 7b 7b 1b 42 43 f2                           |.!{{.BC.|\n000000b8\n\n\n\ngit ls-files -s\n\n100644 0b11cfca50e35a4865e8505f1a108bd23a3f9401 0   file1.txt\n100644 4a8d995103b41f561e547ce3b32e1983d424da22 0   sub/file2.txt\n\n\n\ngit ls-files --debug\n\nfile1.txt\n  ctime: 1756638247:223923616\n  mtime: 1756638247:223923616\n  dev: 16777220 ino: 157785827\n  uid: 502  gid: 20\n  size: 12  flags: 0\nsub/file2.txt\n  ctime: 1756638248:932945171\n  mtime: 1756638248:932945171\n  dev: 16777220 ino: 157785837\n  uid: 502  gid: 20\n  size: 12  flags: 0",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#write-tree-명령",
    "href": "indexfile.html#write-tree-명령",
    "title": "인덱스 파일",
    "section": "write-tree 명령",
    "text": "write-tree 명령\n\nwrite-tree 명령은 인덱스 내의 항목을 기반으로 커밋 등록에 필요한 트리 객체들을 생성하고 인덱스 파일에 추가\n생성된 트리 객체 중 루트 트리의 해시값을 출력",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-6-트리-객체-생성",
    "href": "indexfile.html#실습-6-트리-객체-생성",
    "title": "인덱스 파일",
    "section": "실습 6: 트리 객체 생성",
    "text": "실습 6: 트리 객체 생성\n\ngit write-tree\n\n4c2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\n\n\n\n2개의 트리 객체가 만들어진다.\n\n\ntree .git/objects\n\n.git/objects\n├── 0b\n│   └── 11cfca50e35a4865e8505f1a108bd23a3f9401\n├── 4a\n│   └── 8d995103b41f561e547ce3b32e1983d424da22\n├── 4c\n│   └── 2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\n├── dd\n│   └── 62677237dce0946aeffef97910ffc4ec32c3e7\n├── info\n└── pack\n\n7 directories, 4 files\n\n\n\n각 트리 객체의 내용은 다음과 같다.\n\n\ngit cat-file -p 4c2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\n\n100644 blob 0b11cfca50e35a4865e8505f1a108bd23a3f9401    file1.txt\n040000 tree dd62677237dce0946aeffef97910ffc4ec32c3e7    sub\n\n\n\ngit cat-file -p dd62677237dce0946aeffef97910ffc4ec32c3e7\n\n100644 blob 4a8d995103b41f561e547ce3b32e1983d424da22    file2.txt\n\n\n\n트리 객체의 경우에는 cat-file -p 명령대신 ls-tree 명령 사용 가능\n\n\ngit ls-tree 4c2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\n\n100644 blob 0b11cfca50e35a4865e8505f1a108bd23a3f9401    file1.txt\n040000 tree dd62677237dce0946aeffef97910ffc4ec32c3e7    sub\n\n\n\ngit ls-tree dd62677237dce0946aeffef97910ffc4ec32c3e7\n\n100644 blob 4a8d995103b41f561e547ce3b32e1983d424da22    file2.txt\n\n\n\nwrite-tree 명령은 인덱스 파일에도 생성된 트리 객체의 정보를 넣는다\n\n\nhexdump -C .git/index\n\n00000000  44 49 52 43 00 00 00 02  00 00 00 02 68 b4 2c 27  |DIRC........h.,'|\n00000010  0d 58 cd a0 68 b4 2c 27  0d 58 cd a0 01 00 00 04  |.X..h.,'.X......|\n00000020  09 67 9e e3 00 00 81 a4  00 00 01 f6 00 00 00 14  |.g..............|\n00000030  00 00 00 0c 0b 11 cf ca  50 e3 5a 48 65 e8 50 5f  |........P.ZHe.P_|\n00000040  1a 10 8b d2 3a 3f 94 01  00 09 66 69 6c 65 31 2e  |....:?....file1.|\n00000050  74 78 74 00 68 b4 2c 28  37 9b 9d 13 68 b4 2c 28  |txt.h.,(7...h.,(|\n00000060  37 9b 9d 13 01 00 00 04  09 67 9e ed 00 00 81 a4  |7........g......|\n00000070  00 00 01 f6 00 00 00 14  00 00 00 0c 4a 8d 99 51  |............J..Q|\n00000080  03 b4 1f 56 1e 54 7c e3  b3 2e 19 83 d4 24 da 22  |...V.T|......$.\"|\n00000090  00 0d 73 75 62 2f 66 69  6c 65 32 2e 74 78 74 00  |..sub/file2.txt.|\n000000a0  00 00 00 00 54 52 45 45  00 00 00 35 00 32 20 31  |....TREE...5.2 1|\n000000b0  0a 4c 2c f5 eb 3d 8a f1  1e 9f e5 f5 6c b6 c8 53  |.L,..=......l..S|\n000000c0  e1 55 9d 71 66 73 75 62  00 31 20 30 0a dd 62 67  |.U.qfsub.1 0..bg|\n000000d0  72 37 dc e0 94 6a ef fe  f9 79 10 ff c4 ec 32 c3  |r7...j...y....2.|\n000000e0  e7 9e 9e 32 c5 01 92 11  72 dd 94 82 12 6b 43 f0  |...2....r....kC.|\n000000f0  65 89 a9 3c 62                                    |e..&lt;b|\n000000f5",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#status-명령",
    "href": "indexfile.html#status-명령",
    "title": "인덱스 파일",
    "section": "status 명령",
    "text": "status 명령\n\nstatus 명령은 실행시 인덱스 파일을 이용하여 다음과 같은 정보를 알아낸다.\n\n워크트리의 파일이 추적 상태인지 아닌지 알아낸다.\n추적 상태의 파일인 경우 변경되었는지 아닌지 알아낸다.\n파일이 워크트리, 스테이지, 커밋 중 어느 영역에 있는지 알아낸다.\n\n방법은 다음과 같다.\n\n추적/비추적 여부\n\n인덱스 항목에 없는 파일은 비추적 파일이다.\n인덱스 항목에 있는 파일은 스테이지 또는 커밋 영역의 파일이다. 즉, 추적 상태의 파일이다.\n\n추적 파일의 변경 여부\n\n워크트리 파일의 해시값이 인덱스 항목의 블롭 객체 해시값과 같으면 변경되지 않은 파일이다.\n워크트리 파일의 해시값이 인덱스 항목의 블롭 객체 해시값과 다르면 변경된 않은 파일이다.\n\n스테이지/커밋 영역의 구별 여부\n\n인덱스 항목의 해시값과 같은 해시값을 가지는 블롭 객체가 커밋에 있으면 커밋 영역의 파일이다.\n인덱스 항목의 해시값과 같은 해시값을 가지는 블롭 객체가 커밋에 없으면 스테이지 영역의 파일이다.",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-7-상태-조회",
    "href": "indexfile.html#실습-7-상태-조회",
    "title": "인덱스 파일",
    "section": "실습 7: 상태 조회",
    "text": "실습 7: 상태 조회\n\ngit status\n\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   file1.txt\n    new file:   sub/file2.txt",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#commit-tree-명령",
    "href": "indexfile.html#commit-tree-명령",
    "title": "인덱스 파일",
    "section": "commit-tree 명령",
    "text": "commit-tree 명령\n\n커밋 객체를 생성",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-8-커밋-객체-생성",
    "href": "indexfile.html#실습-8-커밋-객체-생성",
    "title": "인덱스 파일",
    "section": "실습 8: 커밋 객체 생성",
    "text": "실습 8: 커밋 객체 생성\n\nGIT_AUTHOR_DATE=\"2025-01-01T12:00:00\" \\\nGIT_COMMITTER_DATE=\"2025-01-01T12:00:00\" \\\ngit commit-tree -m 'first commit' 4c2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\n\ne42955ccb9b2b73c7e81e251cbab0fdc84aed671\n\n\n\ntree .git/objects\n\n.git/objects\n├── 0b\n│   └── 11cfca50e35a4865e8505f1a108bd23a3f9401\n├── 4a\n│   └── 8d995103b41f561e547ce3b32e1983d424da22\n├── 4c\n│   └── 2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\n├── dd\n│   └── 62677237dce0946aeffef97910ffc4ec32c3e7\n├── e4\n│   └── 2955ccb9b2b73c7e81e251cbab0fdc84aed671\n├── info\n└── pack\n\n8 directories, 5 files\n\n\n\n커밋 객체는 정상적으로 생성되었음\n\n\ngit cat-file -p e42955ccb9b2b73c7e81e251cbab0fdc84aed671\n\ntree 4c2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\nauthor user &lt;user@company.com&gt; 1735700400 +0900\ncommitter user &lt;user@company.com&gt; 1735700400 +0900\n\nfirst commit\n\n\n\n그러나 git status 명령으로는 아직 커밋된 상태가 아니라고 나옴\n\n\ngit status\n\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   file1.txt\n    new file:   sub/file2.txt\n\n\n\n\n로그도 정상 출력되지 않음\n\n\ngit log || true\n\nfatal: your current branch 'main' does not have any commits yet",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#update-ref-명령",
    "href": "indexfile.html#update-ref-명령",
    "title": "인덱스 파일",
    "section": "update-ref 명령",
    "text": "update-ref 명령\n\n브랜치가 해당 커밋을 가리키지 않으면 커밋이 생성되었다고 인식하지 않음\nupdate-ref 명령으로 브랜치가 해당 커밋을 가리키게 만듬",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-9-브랜치-참조-파일-생성",
    "href": "indexfile.html#실습-9-브랜치-참조-파일-생성",
    "title": "인덱스 파일",
    "section": "실습 9: 브랜치 참조 파일 생성",
    "text": "실습 9: 브랜치 참조 파일 생성\n\nHEAD는 main 브랜치를 가리키고 있음\n\n\ncat .git/HEAD\n\nref: refs/heads/main\n\n\n\n그러나 main 브랜치에 대한 참조 파일이 만들어지지 않았음\n\n\ntree .git/refs/heads\n\n.git/refs/heads\n\n0 directories, 0 files\n\n\n\nupdate-ref 명령으로 방금 생성한 커밋을 가리키는 main 브랜치 참조 파일 생성\n\n\ngit update-ref refs/heads/main e42955ccb9b2b73c7e81e251cbab0fdc84aed671\n\n\n참조 파일이 생성되었음\n\n\ntree .git/refs/heads\n\n.git/refs/heads\n└── main\n\n1 directory, 1 file\n\n\n\n참조 파일은 방금 생성된 커밋 객체를 가리킴\n\n\ncat .git/refs/heads/main\n\ne42955ccb9b2b73c7e81e251cbab0fdc84aed671\n\n\n\n이제 정상적으로 커밋되었다고 인식함\n\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\n로그도 정상적으로 출력\n\n\ngit log\n\ncommit e42955ccb9b2b73c7e81e251cbab0fdc84aed671 (HEAD -&gt; main)\nAuthor: user &lt;user@company.com&gt;\nDate:   Wed Jan 1 12:00:00 2025 +0900\n\n    first commit",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#실습-10-add-commit-명령-사용",
    "href": "indexfile.html#실습-10-add-commit-명령-사용",
    "title": "인덱스 파일",
    "section": "실습 10: add, commit 명령 사용",
    "text": "실습 10: add, commit 명령 사용\n\n지금까지 한 작업을 add, commit 명령으로 해본다.\n저장소 리셋\n\n\ncd $HOME/lab\nrm -rf test_internal_02\ngit init test_internal_02\ncd test_internal_02\n\n\n\nInitialized empty Git repository in ~/lab/test_internal_02/.git/\n\n\n\necho \"file1 line1\" &gt; file1.txt\nmkdir sub\necho \"file2 line1\" &gt; sub/file2.txt\ngit add .\n\n\nhexdump -C .git/index\n\n00000000  44 49 52 43 00 00 00 02  00 00 00 02 68 b4 2c 2d  |DIRC........h.,-|\n00000010  24 1a 62 1d 68 b4 2c 2d  24 1a 62 1d 01 00 00 04  |$.b.h.,-$.b.....|\n00000020  09 67 9f 31 00 00 81 a4  00 00 01 f6 00 00 00 14  |.g.1............|\n00000030  00 00 00 0c 0b 11 cf ca  50 e3 5a 48 65 e8 50 5f  |........P.ZHe.P_|\n00000040  1a 10 8b d2 3a 3f 94 01  00 09 66 69 6c 65 31 2e  |....:?....file1.|\n00000050  74 78 74 00 68 b4 2c 2d  2a b1 1f 02 68 b4 2c 2d  |txt.h.,-*...h.,-|\n00000060  2a b1 1f 02 01 00 00 04  09 67 9f 33 00 00 81 a4  |*........g.3....|\n00000070  00 00 01 f6 00 00 00 14  00 00 00 0c 4a 8d 99 51  |............J..Q|\n00000080  03 b4 1f 56 1e 54 7c e3  b3 2e 19 83 d4 24 da 22  |...V.T|......$.\"|\n00000090  00 0d 73 75 62 2f 66 69  6c 65 32 2e 74 78 74 00  |..sub/file2.txt.|\n000000a0  00 00 00 00 f6 72 a6 22  d9 36 43 3c 2d a0 ad 16  |.....r.\".6C&lt;-...|\n000000b0  10 37 f6 5e 9f 5b f1 93                           |.7.^.[..|\n000000b8\n\n\n\ntree .git/objects\n\n.git/objects\n├── 0b\n│   └── 11cfca50e35a4865e8505f1a108bd23a3f9401\n├── 4a\n│   └── 8d995103b41f561e547ce3b32e1983d424da22\n├── info\n└── pack\n\n5 directories, 2 files\n\n\n\nGIT_AUTHOR_DATE=\"2025-01-01T12:00:00\" \\\nGIT_COMMITTER_DATE=\"2025-01-01T12:00:00\" \\\ngit commit -m 'first commit'\n\n[main (root-commit) e42955c] first commit\n 2 files changed, 2 insertions(+)\n create mode 100644 file1.txt\n create mode 100644 sub/file2.txt\n\n\n\nhexdump -C .git/index\n\n00000000  44 49 52 43 00 00 00 02  00 00 00 02 68 b4 2c 2d  |DIRC........h.,-|\n00000010  24 1a 62 1d 68 b4 2c 2d  24 1a 62 1d 01 00 00 04  |$.b.h.,-$.b.....|\n00000020  09 67 9f 31 00 00 81 a4  00 00 01 f6 00 00 00 14  |.g.1............|\n00000030  00 00 00 0c 0b 11 cf ca  50 e3 5a 48 65 e8 50 5f  |........P.ZHe.P_|\n00000040  1a 10 8b d2 3a 3f 94 01  00 09 66 69 6c 65 31 2e  |....:?....file1.|\n00000050  74 78 74 00 68 b4 2c 2d  2a b1 1f 02 68 b4 2c 2d  |txt.h.,-*...h.,-|\n00000060  2a b1 1f 02 01 00 00 04  09 67 9f 33 00 00 81 a4  |*........g.3....|\n00000070  00 00 01 f6 00 00 00 14  00 00 00 0c 4a 8d 99 51  |............J..Q|\n00000080  03 b4 1f 56 1e 54 7c e3  b3 2e 19 83 d4 24 da 22  |...V.T|......$.\"|\n00000090  00 0d 73 75 62 2f 66 69  6c 65 32 2e 74 78 74 00  |..sub/file2.txt.|\n000000a0  00 00 00 00 54 52 45 45  00 00 00 35 00 32 20 31  |....TREE...5.2 1|\n000000b0  0a 4c 2c f5 eb 3d 8a f1  1e 9f e5 f5 6c b6 c8 53  |.L,..=......l..S|\n000000c0  e1 55 9d 71 66 73 75 62  00 31 20 30 0a dd 62 67  |.U.qfsub.1 0..bg|\n000000d0  72 37 dc e0 94 6a ef fe  f9 79 10 ff c4 ec 32 c3  |r7...j...y....2.|\n000000e0  e7 2e 4a cd 6a f7 7d a2  4a 7b 29 b3 94 91 db e8  |..J.j.}.J{).....|\n000000f0  15 0f c1 2c 62                                    |...,b|\n000000f5\n\n\n\ntree .git/objects\n\n.git/objects\n├── 0b\n│   └── 11cfca50e35a4865e8505f1a108bd23a3f9401\n├── 4a\n│   └── 8d995103b41f561e547ce3b32e1983d424da22\n├── 4c\n│   └── 2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\n├── dd\n│   └── 62677237dce0946aeffef97910ffc4ec32c3e7\n├── e4\n│   └── 2955ccb9b2b73c7e81e251cbab0fdc84aed671\n├── info\n└── pack\n\n8 directories, 5 files",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "indexfile.html#인덱스-락-파일",
    "href": "indexfile.html#인덱스-락-파일",
    "title": "인덱스 파일",
    "section": "인덱스 락 파일",
    "text": "인덱스 락 파일\n\n인덱스 파일에 두 개 이상의 프로세스가 동시에 쓰기를 허용하면 누락 정보가 발생할 수 있음\n따라서 인덱스 파일에 대한 쓰기 작업은 한 번에 하나의 프로세스만 가능\n먼저 쓰기를 시도하는 프로세스가 인덱스 파일을 복사한 index.lock이라는 인덱스 락 파일을 생성\n만약 인덱스 락 파일이 존재하면 다른 프로세스는 인덱스 쓰기 실패함\n쓰기 권한을 가진 프로세스는 인덱스 파일 자체 대신 인덱스 락 파일에 쓰기 시도\n쓰기가 완료되면 index.lock 파일의 이름을 index로 바꿔서 한번에 파일 교체\n\n\ntouch .git/index.lock\n\n\ngit add file1.txt || true\n\nfatal: Unable to create '/Users/joelkim/Work/personal/book_git/lab/test_internal_02/.git/index.lock': File exists.\n\nAnother git process seems to be running in this repository, e.g.\nan editor opened by 'git commit'. Please make sure all processes\nare terminated then try again. If it still fails, a git process\nmay have crashed in this repository earlier:\nremove the file manually to continue.\n\n\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean",
    "crumbs": [
      "관리자용 고급",
      "인덱스 파일"
    ]
  },
  {
    "objectID": "figs/figs.html",
    "href": "figs/figs.html",
    "title": "Git Book",
    "section": "",
    "text": "%load_ext jupyter_tikz\npreamble = r\"\"\"\n\\usepackage{kotex}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\"\"\"\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_01\n\\begin{tikzpicture}\n  \\begin{scope}[every node/.style=draw, minimum width=4cm, minimum height=3cm]\n  \\node (worktree)         at (0,1) {};\n  \\node (stage)            at (5,1) {};\n  \\node (repository)       at (10,1) {};\n  \\end{scope}\n  \\node (worktree-label)   at (0,3) {워크트리};\n  \\node (stage-label)      at (5,3) {스테이지};\n  \\node (repository-label) at (10,3) {레포지토리};\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n      \\begin{scope}[every node/.style=draw, minimum width=4cm, minimum height=3cm]\n      \\node (worktree)         at (0,1) {};\n      \\node (stage)            at (5,1) {};\n      \\node (repository)       at (10,1) {};\n      \\end{scope}\n      \\node (worktree-label)   at (0,3) {워크트리};\n      \\node (stage-label)      at (5,3) {스테이지};\n      \\node (repository-label) at (10,3) {레포지토리};\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\nstyle_git_commit = r\"\"\"\n    draw=black!60,\n    fill=green!40!lightgray,\n    minimum width=2cm,\n    minimum height=1cm,\n    rounded rectangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_pointer = r\"\"\"\n    draw=black!60,\n    -Triangle,\n    line width=2pt\n\"\"\"\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_log_01\n\\begin{tikzpicture}\n\\begin{scope}[\n    every node/.style={(* style_git_commit *)},\n    every path/.style={(* style_git_pointer *)}\n]\n\\node (c1) at (0,0) {c1};\n\\node (c2) at (3,0) {c2}; \\path (c2) edge (c1);\n\\node (c3) at (6,0) {c3}; \\path (c3) edge (c2);\n\\end{scope}\n\\node at (0,2) {file1.txt 추가};\n\\node at (3,2) {file1.txt 변경};\n\\node at (3,1.5) {file2.txt 추가};\n\\node at (6,2) {(file1.txt 삭제)};\n\\node at (6,1) {file3.txt 추가};\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n    \\begin{scope}[\n        every node/.style={\n        draw=black!60,\n        fill=green!40!lightgray,\n        minimum width=2cm,\n        minimum height=1cm,\n        rounded rectangle,\n        line width=2pt\n    },\n        every path/.style={\n        draw=black!60,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (c1) at (0,0) {c1};\n    \\node (c2) at (3,0) {c2}; \\path (c2) edge (c1);\n    \\node (c3) at (6,0) {c3}; \\path (c3) edge (c2);\n    \\end{scope}\n    \\node at (0,2) {file1.txt 추가};\n    \\node at (3,2) {file1.txt 변경};\n    \\node at (3,1.5) {file2.txt 추가};\n    \\node at (6,2) {(file1.txt 삭제)};\n    \\node at (6,1) {file3.txt 추가};\n    \\end{tikzpicture}\n\\end{document}"
  },
  {
    "objectID": "figs/fig_internal.html",
    "href": "figs/fig_internal.html",
    "title": "load extension",
    "section": "",
    "text": "%load_ext jupyter_tikz"
  },
  {
    "objectID": "figs/fig_internal.html#preables",
    "href": "figs/fig_internal.html#preables",
    "title": "load extension",
    "section": "preables",
    "text": "preables\n\npreamble = r\"\"\"\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\"\"\"\n\n\nstyle_git_region = r\"\"\"\n    draw=black!70,\n    fill=lightgray!10,\n    minimum width=4.5cm,\n    minimum height=4.5cm,\n    rectangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_file = r\"\"\"\n    draw=black!70,\n    fill=lightgray!20,\n    minimum width=3cm,\n    minimum height=0.7cm,\n    rectangle,\n    line width=1pt\n\"\"\"\n\n\nstyle_git_operation = r\"\"\"\n    draw=black!70,\n    -Triangle,\n    line width=1.2pt,\n    bend left=80,\n    looseness=1.4\n\"\"\"\n\n\nstyle_git_pointer = r\"\"\"\n    draw=black!70,\n    -Triangle,\n    line width=1.2pt\n\"\"\""
  },
  {
    "objectID": "figs/fig_internal.html#figures",
    "href": "figs/fig_internal.html#figures",
    "title": "load extension",
    "section": "figures",
    "text": "figures\n\n%%tikz -S fig_internal_01 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)                         at (0,1) {};\n\\node (stage)                            at (5,1) {};\n\\node[minimum width=12.5cm] (repository) at (14,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n\\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n\\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4.5cm,\n        minimum height=4.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)                         at (0,1) {};\n    \\node (stage)                            at (5,1) {};\n    \\node[minimum width=12.5cm] (repository) at (14,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n    \\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n    \\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_internal_02 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)                         at (0,1) {};\n\\node (stage)                            at (5,1) {};\n\\node[minimum width=12.5cm] (repository) at (14,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n\\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n\\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (file1) at (0,2.5) {file1.txt};\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4.5cm,\n        minimum height=4.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)                         at (0,1) {};\n    \\node (stage)                            at (5,1) {};\n    \\node[minimum width=12.5cm] (repository) at (14,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n    \\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n    \\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (file1) at (0,2.5) {file1.txt};\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_internal_03 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)                         at (0,1) {};\n\\node (stage)                            at (5,1) {};\n\\node[minimum width=12.5cm] (repository) at (14,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n\\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n\\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (file1) at (0,2.5) {file1.txt};\n\\node (file1 entry) at (5,2.5) {file1.txt 엔트리};\n\\node (file1 blob) at (10,2.5) {file1.txt 블롭 객체};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_pointer *)}\n]\n\\draw (file1 entry) edge (file1);\n\\draw (file1 entry) edge (file1 blob);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4.5cm,\n        minimum height=4.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)                         at (0,1) {};\n    \\node (stage)                            at (5,1) {};\n    \\node[minimum width=12.5cm] (repository) at (14,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n    \\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n    \\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (file1) at (0,2.5) {file1.txt};\n    \\node (file1 entry) at (5,2.5) {file1.txt 엔트리};\n    \\node (file1 blob) at (10,2.5) {file1.txt 블롭 객체};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt\n    }\n    ]\n    \\draw (file1 entry) edge (file1);\n    \\draw (file1 entry) edge (file1 blob);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_internal_04 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)                         at (0,1) {};\n\\node (stage)                            at (5,1) {};\n\\node[minimum width=12.5cm] (repository) at (14,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n\\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n\\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (file1) at (0,2.5) {file1.txt};\n\\node (file1 entry) at (5,2.5) {file1.txt 엔트리};\n\\node (file1 blob)  at (10,2.5) {file1.txt 블롭 객체};\n\\node (c1 tree)     at (14,2.5) {c1 트리 객체};\n\\node (c1 commit)   at (18,2.5) {c1 커밋 객체};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_pointer *)}\n]\n\\draw (file1 entry) edge (file1);\n\\draw (file1 entry) edge (file1 blob);\n\\draw (c1 tree) edge (file1 blob);\n\\draw (c1 commit) edge (c1 tree);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4.5cm,\n        minimum height=4.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)                         at (0,1) {};\n    \\node (stage)                            at (5,1) {};\n    \\node[minimum width=12.5cm] (repository) at (14,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n    \\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n    \\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (file1) at (0,2.5) {file1.txt};\n    \\node (file1 entry) at (5,2.5) {file1.txt 엔트리};\n    \\node (file1 blob)  at (10,2.5) {file1.txt 블롭 객체};\n    \\node (c1 tree)     at (14,2.5) {c1 트리 객체};\n    \\node (c1 commit)   at (18,2.5) {c1 커밋 객체};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt\n    }\n    ]\n    \\draw (file1 entry) edge (file1);\n    \\draw (file1 entry) edge (file1 blob);\n    \\draw (c1 tree) edge (file1 blob);\n    \\draw (c1 commit) edge (c1 tree);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_internal_05 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)                         at (0,1) {};\n\\node (stage)                            at (5,1) {};\n\\node[minimum width=12.5cm] (repository) at (14,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n\\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n\\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (file1)       at (0,2.5)    {file1.txt};\n\\node (file2)       at (0,-0.5)   {file2.txt};\n\\node (file1 entry) at (5,2.5)    {file1.txt 엔트리};\n\\node (file2 entry) at (5,-0.5)   {file2.txt 엔트리};\n\\node (file1 blob)  at (10,2.5)   {file1.txt 블롭 객체};\n\\node (file2 blob)  at (10,-0.5)  {file2.txt 블롭 객체};\n\\node (c1 tree)     at (14,2.5)   {c1 트리 객체};\n\\node (c1 commit)   at (18,2.5)   {c1 커밋 객체};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_pointer *)}\n]\n\\draw (file1 entry) edge (file1);\n\\draw (file1 entry) edge (file1 blob);\n\\draw (c1 tree) edge (file1 blob);\n\\draw (c1 commit) edge (c1 tree);\n\\draw (file2 entry) edge (file2);\n\\draw (file2 entry) edge (file2 blob);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4.5cm,\n        minimum height=4.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)                         at (0,1) {};\n    \\node (stage)                            at (5,1) {};\n    \\node[minimum width=12.5cm] (repository) at (14,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n    \\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n    \\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (file1)       at (0,2.5)    {file1.txt};\n    \\node (file2)       at (0,-0.5)   {file2.txt};\n    \\node (file1 entry) at (5,2.5)    {file1.txt 엔트리};\n    \\node (file2 entry) at (5,-0.5)   {file2.txt 엔트리};\n    \\node (file1 blob)  at (10,2.5)   {file1.txt 블롭 객체};\n    \\node (file2 blob)  at (10,-0.5)  {file2.txt 블롭 객체};\n    \\node (c1 tree)     at (14,2.5)   {c1 트리 객체};\n    \\node (c1 commit)   at (18,2.5)   {c1 커밋 객체};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt\n    }\n    ]\n    \\draw (file1 entry) edge (file1);\n    \\draw (file1 entry) edge (file1 blob);\n    \\draw (c1 tree) edge (file1 blob);\n    \\draw (c1 commit) edge (c1 tree);\n    \\draw (file2 entry) edge (file2);\n    \\draw (file2 entry) edge (file2 blob);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_internal_06 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)                         at (0,1) {};\n\\node (stage)                            at (5,1) {};\n\\node[minimum width=12.5cm] (repository) at (14,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n\\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n\\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (file1)       at (0,2.5)    {file1.txt};\n\\node (file2)       at (0,-0.5)   {file2.txt};\n\\node (file1 entry) at (5,2.5)    {file1.txt 엔트리};\n\\node (file2 entry) at (5,-0.5)   {file2.txt 엔트리};\n\\node (file1 blob)  at (10,2.5)   {file1.txt 블롭 객체};\n\\node (file2 blob)  at (10,-0.5)  {file2.txt 블롭 객체};\n\\node (c1 tree)     at (14,2.5)   {c1 트리 객체};\n\\node (c1 commit)   at (18,2.5)   {c1 커밋 객체};\n\\node (c2 tree)     at (14,1)     {c2 트리 객체};\n\\node (sub tree)    at (14,-0.5)  {sub 트리 객체};\n\\node (c2 commit)   at (18,1)     {c2 커밋 객체};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_pointer *)}\n]\n\\draw (file1 entry) edge (file1);\n\\draw (file1 entry) edge (file1 blob);\n\\draw (c1 tree) edge (file1 blob);\n\\draw (c1 commit) edge (c1 tree);\n\\draw (file2 entry) edge (file2);\n\\draw (file2 entry) edge (file2 blob);\n\\draw (c2 tree) edge (file1 blob);\n\\draw (c2 tree) edge (sub tree);\n\\draw (sub tree) edge (file2 blob);\n\\draw (c2 commit) edge (c1 commit);\n\\draw (c2 commit) edge (c2 tree);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4.5cm,\n        minimum height=4.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)                         at (0,1) {};\n    \\node (stage)                            at (5,1) {};\n    \\node[minimum width=12.5cm] (repository) at (14,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,-2) {\\shortstack{워크트리\\\\(체크아웃 디렉토리) }};\n    \\node (stage-label)      at (5,-2) {\\shortstack{인덱스 파일 (스테이지)\\\\.git/index}};\n    \\node (repository-label) at (14,-2) {\\shortstack{객체 디렉토리 (레포지토리)\\\\.git/objects/...}};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (file1)       at (0,2.5)    {file1.txt};\n    \\node (file2)       at (0,-0.5)   {file2.txt};\n    \\node (file1 entry) at (5,2.5)    {file1.txt 엔트리};\n    \\node (file2 entry) at (5,-0.5)   {file2.txt 엔트리};\n    \\node (file1 blob)  at (10,2.5)   {file1.txt 블롭 객체};\n    \\node (file2 blob)  at (10,-0.5)  {file2.txt 블롭 객체};\n    \\node (c1 tree)     at (14,2.5)   {c1 트리 객체};\n    \\node (c1 commit)   at (18,2.5)   {c1 커밋 객체};\n    \\node (c2 tree)     at (14,1)     {c2 트리 객체};\n    \\node (sub tree)    at (14,-0.5)  {sub 트리 객체};\n    \\node (c2 commit)   at (18,1)     {c2 커밋 객체};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt\n    }\n    ]\n    \\draw (file1 entry) edge (file1);\n    \\draw (file1 entry) edge (file1 blob);\n    \\draw (c1 tree) edge (file1 blob);\n    \\draw (c1 commit) edge (c1 tree);\n    \\draw (file2 entry) edge (file2);\n    \\draw (file2 entry) edge (file2 blob);\n    \\draw (c2 tree) edge (file1 blob);\n    \\draw (c2 tree) edge (sub tree);\n    \\draw (sub tree) edge (file2 blob);\n    \\draw (c2 commit) edge (c1 commit);\n    \\draw (c2 commit) edge (c2 tree);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}"
  },
  {
    "objectID": "figs/fig_basic.html",
    "href": "figs/fig_basic.html",
    "title": "load extension",
    "section": "",
    "text": "%load_ext jupyter_tikz"
  },
  {
    "objectID": "figs/fig_basic.html#preables",
    "href": "figs/fig_basic.html#preables",
    "title": "load extension",
    "section": "preables",
    "text": "preables\n\npreamble = r\"\"\"\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\"\"\"\n\n\nstyle_git_region = r\"\"\"\n    draw=black!70,\n    fill=lightgray!10,\n    minimum width=4cm,\n    minimum height=3.5cm,\n    rectangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_file = r\"\"\"\n    draw=black!70,\n    fill=lightgray!20,\n    minimum width=3.5cm,\n    minimum height=0.7cm,\n    rectangle,\n    line width=1pt\n\"\"\"\n\n\nstyle_git_operation = r\"\"\"\n    draw=black!70,\n    -Triangle,\n    line width=1.2pt,\n    bend left=80,\n    looseness=1.4\n\"\"\"\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_01\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_02\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (untracked)     at (0,1) {untracked};\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (untracked)     at (0,1) {untracked};\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_03\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node[dashed] (untracked) at (0,1) {untracked};\n\\node (added)             at (5,1) {added};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (untracked) edge node[above] {add 명령(복사)} (added);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node[dashed] (untracked) at (0,1) {untracked};\n    \\node (added)             at (5,1) {added};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (untracked) edge node[above] {add 명령(복사)} (added);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_04\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node[dashed] (tracked clean) at (0,2) {tracked,clean};\n\\node[dashed] (untracked)     at (0,1) {untracked};\n\\node[dashed] (added)         at (5,1) {added};\n\\node[cross out]              at (5,1) {};\n\\node (commit c1)             at (10,1) {commit c1};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (added) edge[bend left] node[above] {commit 명령(이동)} (commit c1);\n\\draw (untracked) edge[bend left=0] (tracked clean);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node[dashed] (tracked clean) at (0,2) {tracked,clean};\n    \\node[dashed] (untracked)     at (0,1) {untracked};\n    \\node[dashed] (added)         at (5,1) {added};\n    \\node[cross out]              at (5,1) {};\n    \\node (commit c1)             at (10,1) {commit c1};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (added) edge[bend left] node[above] {commit 명령(이동)} (commit c1);\n    \\draw (untracked) edge[bend left=0] (tracked clean);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_05\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (tracked modified) at (0,1) {tracked,modified};\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (tracked modified) at (0,1) {tracked,modified};\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_06\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node[dashed] (tracked modified)  at (0,1) {tracked,modified};\n\\node (tracked modified in stage) at (5,1) {tracked,modified};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (tracked modified) edge[bend left] node[above] {add 명령(복사)} (tracked modified in stage);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node[dashed] (tracked modified)  at (0,1) {tracked,modified};\n    \\node (tracked modified in stage) at (5,1) {tracked,modified};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (tracked modified) edge[bend left] node[above] {add 명령(복사)} (tracked modified in stage);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_07\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node[dashed] (tracked clean)             at (0,2) {tracked,clean};\n\\node[dashed] (tracked modified)          at (0,1) {tracked,modified};\n\\node[dashed] (tracked modified in stage) at (5,1) {tracked,modified};\n\\node[cross out]                          at (5,1) {};\n\\node (commit c2)                         at (10,1) {commit c2};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (tracked modified in stage) edge[bend left] node[above] {commit 명령(이동)} (commit c2);\n\\draw (tracked modified) edge[bend left=0] (tracked clean);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node[dashed] (tracked clean)             at (0,2) {tracked,clean};\n    \\node[dashed] (tracked modified)          at (0,1) {tracked,modified};\n    \\node[dashed] (tracked modified in stage) at (5,1) {tracked,modified};\n    \\node[cross out]                          at (5,1) {};\n    \\node (commit c2)                         at (10,1) {commit c2};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (tracked modified in stage) edge[bend left] node[above] {commit 명령(이동)} (commit c2);\n    \\draw (tracked modified) edge[bend left=0] (tracked clean);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_08\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node[dashed] (tracked clean)  at (0,2) {tracked,clean};\n\\node (tracked modified)       at (0,1) {tracked,modified};\n\\node[cross out]               at (0,1) {};\n\\node (commit c2)              at (10,1) {commit c2};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (commit c2) edge[bend left=30] node[below] {restore 명령(복사)} (tracked modified);\n\\draw (tracked modified) edge[bend left=0] (tracked clean);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node[dashed] (tracked clean)  at (0,2) {tracked,clean};\n    \\node (tracked modified)       at (0,1) {tracked,modified};\n    \\node[cross out]               at (0,1) {};\n    \\node (commit c2)              at (10,1) {commit c2};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (commit c2) edge[bend left=30] node[below] {restore 명령(복사)} (tracked modified);\n    \\draw (tracked modified) edge[bend left=0] (tracked clean);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_09\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (tracked modified)                  at (0,1) {tracked,modified};\n\\node[dashed] (tracked modified in stage) at (5,1) {tracked,modified};\n\\node[cross out]                          at (5,1) {};\n\\node (commit c2)                         at (10,1) {commit c2};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (commit c2) edge[bend left] node[below] {git restore --staged 명령(복사)} (tracked modified in stage);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (tracked modified)                  at (0,1) {tracked,modified};\n    \\node[dashed] (tracked modified in stage) at (5,1) {tracked,modified};\n    \\node[cross out]                          at (5,1) {};\n    \\node (commit c2)                         at (10,1) {commit c2};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (commit c2) edge[bend left] node[below] {git restore --staged 명령(복사)} (tracked modified in stage);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_10\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (tracked modified)          at (0,1) {tracked,modified};\n\\node (tracked modified in stage) at (5,1) {tracked,modified};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (tracked modified in stage) edge node[below] {git restore} (tracked modified);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (tracked modified)          at (0,1) {tracked,modified};\n    \\node (tracked modified in stage) at (5,1) {tracked,modified};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (tracked modified in stage) edge node[below] {git restore} (tracked modified);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_11\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (tracked modified2)         at (0,1) {tracked,modified2};\n\\node[cross out]                  at (0,1) {};\n\\node[dashed] (tracked modified)          at (0,2) {tracked,modified};\n\\node (tracked modified in stage) at (5,1) {tracked,modified};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (tracked modified in stage) edge node[below] {git restore} (tracked modified2);\n\\draw (tracked modified2) edge[bend left=0] (tracked modified);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (tracked modified2)         at (0,1) {tracked,modified2};\n    \\node[cross out]                  at (0,1) {};\n    \\node[dashed] (tracked modified)          at (0,2) {tracked,modified};\n    \\node (tracked modified in stage) at (5,1) {tracked,modified};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (tracked modified in stage) edge node[below] {git restore} (tracked modified2);\n    \\draw (tracked modified2) edge[bend left=0] (tracked modified);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_12\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node (tracked deleted) at (0,1) {tracked,deleted};\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node (tracked deleted) at (0,1) {tracked,deleted};\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_13\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node[dashed] (tracked deleted) at (0,1) {tracked,deleted};\n\\node (tracked deleted in stage) at (5,1) {tracked,deleted};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (tracked deleted) edge[bend left] node[above] {add 명령(복사)} (tracked deleted in stage);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node[dashed] (tracked deleted) at (0,1) {tracked,deleted};\n    \\node (tracked deleted in stage) at (5,1) {tracked,deleted};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (tracked deleted) edge[bend left] node[above] {add 명령(복사)} (tracked deleted in stage);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_basic_14\n\\begin{tikzpicture}\n\n\\begin{scope}[\n    every node/.style={(* style_git_region *)}\n]\n\\node (worktree)         at (0,1) {};\n\\node (stage)            at (5,1) {};\n\\node (repository)       at (10,1) {};\n\\end{scope}\n\n\\node (worktree-label)   at (0,0) {워크트리};\n\\node (stage-label)      at (5,0) {스테이지};\n\\node (repository-label) at (10,0) {레포지토리};\n\n\\begin{scope}[\n    every node/.style={(* style_git_file *)}\n]\n\\node[dashed] (tracked deleted)          at (0,1) {tracked,deleted};\n\\node[cross out]                         at (0,1) {};\n\\node[dashed] (tracked deleted in stage) at (5,1) {tracked,deleted};\n\\node[cross out]                         at (5,1) {};\n\\node (commit c3)                        at (10,1) {commit c3};\n\\end{scope}\n\n\\begin{scope}[\n    every edge/.style={(* style_git_operation *)}\n]\n\\draw (tracked deleted in stage) edge[bend left] node[above] {commit 명령(이동)} (commit c3);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!10,\n        minimum width=4cm,\n        minimum height=3.5cm,\n        rectangle,\n        line width=2pt\n    }\n    ]\n    \\node (worktree)         at (0,1) {};\n    \\node (stage)            at (5,1) {};\n    \\node (repository)       at (10,1) {};\n    \\end{scope}\n\n    \\node (worktree-label)   at (0,0) {워크트리};\n    \\node (stage-label)      at (5,0) {스테이지};\n    \\node (repository-label) at (10,0) {레포지토리};\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=lightgray!20,\n        minimum width=3.5cm,\n        minimum height=0.7cm,\n        rectangle,\n        line width=1pt\n    }\n    ]\n    \\node[dashed] (tracked deleted)          at (0,1) {tracked,deleted};\n    \\node[cross out]                         at (0,1) {};\n    \\node[dashed] (tracked deleted in stage) at (5,1) {tracked,deleted};\n    \\node[cross out]                         at (5,1) {};\n    \\node (commit c3)                        at (10,1) {commit c3};\n    \\end{scope}\n\n    \\begin{scope}[\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt,\n        bend left=80,\n        looseness=1.4\n    }\n    ]\n    \\draw (tracked deleted in stage) edge[bend left] node[above] {commit 명령(이동)} (commit c3);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}"
  },
  {
    "objectID": "conflict.html",
    "href": "conflict.html",
    "title": "충돌",
    "section": "",
    "text": "Building Git, Ch. 17 Basic Merging\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf",
    "crumbs": [
      "사용자용 기초",
      "충돌"
    ]
  },
  {
    "objectID": "conflict.html#참고-문헌",
    "href": "conflict.html#참고-문헌",
    "title": "충돌",
    "section": "",
    "text": "Building Git, Ch. 17 Basic Merging\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf",
    "crumbs": [
      "사용자용 기초",
      "충돌"
    ]
  },
  {
    "objectID": "commit_analysis.html",
    "href": "commit_analysis.html",
    "title": "커밋 분석",
    "section": "",
    "text": "Building Git, Ch. 13 Branching Out\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A1460%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#참고-문헌",
    "href": "commit_analysis.html#참고-문헌",
    "title": "커밋 분석",
    "section": "",
    "text": "Building Git, Ch. 13 Branching Out\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A1460%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#커밋-기록을-살피기-위한-명령",
    "href": "commit_analysis.html#커밋-기록을-살피기-위한-명령",
    "title": "커밋 분석",
    "section": "커밋 기록을 살피기 위한 명령",
    "text": "커밋 기록을 살피기 위한 명령\n\n다음은 커밋 기록을 살피기 위한 명령\n모두 커밋참조와 파일(객체)참조를 인수로 받음\n\n\n\n\n명령\n설명\n\n\n\n\ngit log\n과거부터 현재까지의 모든 커밋 기록 보기\n\n\ngit ls-tree\n특정 커밋의 스냅샷 파일 목록 보기\n\n\ngit cat-file\n특정 커밋의 객체 정보 보기\n\n\ngit show\n특정 커밋의 변경 내역 및 파일 내용 보기\n\n\ngit diff\n커밋간의 차이 보기",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#커밋참조",
    "href": "commit_analysis.html#커밋참조",
    "title": "커밋 분석",
    "section": "커밋참조",
    "text": "커밋참조\n\n커밋을 참조하는 방법은 2가지\n\n절대참조: 커밋의 해시값\n상대참조: 현재 위치로부터 과거의 커밋을 상대적으로 지시\n\nHEAD: 현재 체크아웃되어 있는 커밋\n~N: 특정 커밋 위치로부터 N번 앞(과거)의 커밋\n\n현재 커밋 바로 앞의 커밋(부모 커밋)은 HEAD~1\n현재 커밋 2번재 앞 커밋(조부모 커밋)은 HEAD~2",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#파일참조",
    "href": "commit_analysis.html#파일참조",
    "title": "커밋 분석",
    "section": "파일참조",
    "text": "파일참조\n\n파일을 참조하는 방법은 2가지\n\n절대참조: 파일의 해시값\n경로참조: 파일의 이름 또는 경로",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#실습-1-레포지토리-생성",
    "href": "commit_analysis.html#실습-1-레포지토리-생성",
    "title": "커밋 분석",
    "section": "실습 1: 레포지토리 생성",
    "text": "실습 1: 레포지토리 생성\n\n레포지토리 생성\n\n\ncd $HOME/lab\nrm -rf test_commit_01\ngit init test_commit_01\ncd test_commit_01\n\n\n\nInitialized empty Git repository in /test_commit_01/.git/\n\n\n\n최초 커밋\n\n\necho \"file1 line 1\" &gt;&gt; file1.txt\ngit add .\ngit commit -m c1\n\n[main (root-commit) bd09e96] c1\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n\n\n\necho \"file1 line 2\" &gt;&gt; file1.txt\necho \"file2 line 1\" &gt;&gt; file2.txt\ngit add .\ngit commit -m c2\n\n[main 211266b] c2\n 2 files changed, 2 insertions(+)\n create mode 100644 file2.txt\n\n\n\ngit rm file1.txt\nmkdir sub\necho \"file3 line 1\" &gt;&gt; sub/file3.txt\ngit add .\ngit commit -m c3\n\nrm 'file1.txt'\n[main a19df1c] c3\n 2 files changed, 1 insertion(+), 2 deletions(-)\n delete mode 100644 file1.txt\n create mode 100644 sub/file3.txt\n\n\n\n\n\n그림: 예제 커밋 상황",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#log-명령",
    "href": "commit_analysis.html#log-명령",
    "title": "커밋 분석",
    "section": "log 명령",
    "text": "log 명령\n\n과거부터 현재까지의 모든 커밋 기록 보기\n\n\nlog 명령 사용법\n\ngit log [옵션]: 모든 로그 출력\ngit log [옵션] &lt;파일 또는 경로&gt;: 특정 파일 또는 경로에 대한 로그만 출력.\ngit log &lt;커밋참조1&gt;..&lt;커밋참조2&gt;: 커밋1부터 커밋2까지의 로그만 추력\n\n\n\nlog 명령의 옵션\n\n출력 형식 제어\n\n출력형식은 --pretty 옵션으로 제어\n\ngit log --pretty=medium: 기본값 (해시 + 작성자 + 날짜 + 메시지)\ngit log --pretty=short: 간단한 정보 (해시 + 작성자 + 메시지)\ngit log --pretty=oneline: 한 줄 출력 (해시 + 메시지)\ngit log --oneline: 한 줄 출력 (단축해시 + 메시지)\ngit log --pretty=format: 사용자 정의 형식 출력\n\n\n\n\n출력 내용 제어\n\n--stat: 변경 파일 목록 및 간단한 통계\n\n\n\n출력 필터링 제어\n\ngit log --author=\"이름\": 특정 작성자(committer/author)의 커밋만 출력.\ngit log --grep=\"키워드\": 커밋 메시지에 키워드가 포함된 것만 검색.\ngit log --since=\"2024-01-01\": 특정 날짜 이후 커밋만 출력.\ngit log --until=\"2024-08-01\": 특정 날짜 이전 커밋만 출력.",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#실습-2-log-명령",
    "href": "commit_analysis.html#실습-2-log-명령",
    "title": "커밋 분석",
    "section": "실습 2: log 명령",
    "text": "실습 2: log 명령\n\ngit log\n\ncommit a19df1c691f07db739c592d0666ba8c55b363512 (HEAD -&gt; main)\nAuthor: user &lt;user@company.com&gt;\nDate:   Thu Sep 18 22:23:36 2025 +0900\n\n    c3\n\ncommit 211266b71656a9d2c504d278621547a059aa4b91\nAuthor: user &lt;user@company.com&gt;\nDate:   Thu Sep 18 22:23:36 2025 +0900\n\n    c2\n\ncommit bd09e963fbfa641e031a394b0c6dff57ba08aa76\nAuthor: user &lt;user@company.com&gt;\nDate:   Thu Sep 18 22:23:35 2025 +0900\n\n    c1\n\n\n\ngit log --pretty=short\n\ncommit a19df1c691f07db739c592d0666ba8c55b363512 (HEAD -&gt; main)\nAuthor: user &lt;user@company.com&gt;\n\n    c3\n\ncommit 211266b71656a9d2c504d278621547a059aa4b91\nAuthor: user &lt;user@company.com&gt;\n\n    c2\n\ncommit bd09e963fbfa641e031a394b0c6dff57ba08aa76\nAuthor: user &lt;user@company.com&gt;\n\n    c1\n\n\n\ngit log --pretty=oneline\n\na19df1c691f07db739c592d0666ba8c55b363512 (HEAD -&gt; main) c3\n211266b71656a9d2c504d278621547a059aa4b91 c2\nbd09e963fbfa641e031a394b0c6dff57ba08aa76 c1\n\n\n\ngit log --oneline\n\na19df1c (HEAD -&gt; main) c3\n211266b c2\nbd09e96 c1\n\n\n\ngit log --pretty=format:\"%h %s\"\n\na19df1c c3\n211266b c2\nbd09e96 c1\n\n\n\ngit log --oneline --stat\n\na19df1c (HEAD -&gt; main) c3\n file1.txt     | 2 --\n sub/file3.txt | 1 +\n 2 files changed, 1 insertion(+), 2 deletions(-)\n211266b c2\n file1.txt | 1 +\n file2.txt | 1 +\n 2 files changed, 2 insertions(+)\nbd09e96 c1\n file1.txt | 1 +\n 1 file changed, 1 insertion(+)\n\n\n\ngit log --oneline --numstat\n\na19df1c (HEAD -&gt; main) c3\n0   2   file1.txt\n1   0   sub/file3.txt\n211266b c2\n1   0   file1.txt\n1   0   file2.txt\nbd09e96 c1\n1   0   file1.txt\n\n\n\ngit log --oneline file2.txt\n\n211266b c2\n\n\n\ngit log --all --oneline -- file1.txt\n\na19df1c (HEAD -&gt; main) c3\n211266b c2\nbd09e96 c1",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#ls-tree-명령",
    "href": "commit_analysis.html#ls-tree-명령",
    "title": "커밋 분석",
    "section": "ls-tree 명령",
    "text": "ls-tree 명령\n\n특정 커밋에 포함된 객체의 목록 출력\n\n\nls-tree 명령 사용법\n\ngit ls-tree [옵션] 커밋참조 해당 커밋에 포함된 객체의 목록 출력\n\n\n\nls-tree 명령의 옵션\n\n-r &lt;유형&gt;\n\n트리 객체는 생략하고 파일만 하위 디렉토리의 파일까지 출력\n-r 옵션이 없으면 루트 트리 즉, 최상위 디렉토리의 내용만 출력\n\n--name-only &lt;유형&gt;\n\n파일 이름만 출력\n생략하면 모드, 객체 유형 및 해시값도 출력",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#실습-3-ls-tree-명령",
    "href": "commit_analysis.html#실습-3-ls-tree-명령",
    "title": "커밋 분석",
    "section": "실습 3: ls-tree 명령",
    "text": "실습 3: ls-tree 명령\n\ngit ls-tree HEAD\n\n100644 blob 7a04146eee55f77a1af94221961598f3f9495edc    file2.txt\n040000 tree f3460eff5961a211a218462d0b22335667b2da63    sub\n\n\n\ngit ls-tree --name-only HEAD\n\nfile2.txt\nsub\n\n\n\ngit ls-tree -r HEAD\n\n100644 blob 7a04146eee55f77a1af94221961598f3f9495edc    file2.txt\n100644 blob 4abff1731a6775f4113f6397bb7d51582c1fae59    sub/file3.txt\n\n\n\ngit ls-tree -r --name-only HEAD\n\nfile2.txt\nsub/file3.txt\n\n\n\ngit ls-tree -r --name-only HEAD~1\n\nfile1.txt\nfile2.txt\n\n\n\ngit ls-tree -r --name-only HEAD~2\n\nfile1.txt",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#cat-file-명령",
    "href": "commit_analysis.html#cat-file-명령",
    "title": "커밋 분석",
    "section": "cat-file 명령",
    "text": "cat-file 명령\n\n커밋에 포함된 객체의 개별 정보 출력\n\n\ncat-file 명령 사용법\n\ngit cat-file &lt;커밋참조&gt;:&lt;객체참조&gt;: 커밋에 포함된 객체의 정보를 출력\n\n\n\ncat-file 명령의 옵션\n\n-p\n\n사람이 읽을 수 있게 파싱하여 출력",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#실습-4-cat-file-명령",
    "href": "commit_analysis.html#실습-4-cat-file-명령",
    "title": "커밋 분석",
    "section": "실습 4: cat-file 명령",
    "text": "실습 4: cat-file 명령\n\ngit cat-file -p HEAD:file2.txt\n\nfile2 line 1\n\n\n\ngit cat-file -p HEAD~1:file2.txt\n\nfile2 line 1\n\n\n\ngit cat-file -p HEAD~2:file2.txt || true\n\nfatal: path 'file2.txt' exists on disk, but not in 'HEAD~2'\n\n\n\ngit cat-file -p HEAD:file1.txt || true\n\nfatal: path 'file1.txt' does not exist in 'HEAD'\n\n\n\ngit cat-file -p HEAD~1:file1.txt\n\nfile1 line 1\nfile1 line 2\n\n\n\ngit cat-file -p HEAD~2:file1.txt\n\nfile1 line 1",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#show-명령",
    "href": "commit_analysis.html#show-명령",
    "title": "커밋 분석",
    "section": "show 명령",
    "text": "show 명령\n\n특정 커밋의 변경 내역 출력\n특정 커밋에 포함된 파일의 내용 출력\n\n\nshow 명령 사용법\n\ngit show [옵션] 커밋참조: 해당 커밋과 바로 전 커밋의 변경 내역 출력\ngit show [옵션] 커밋참조:파일참조: 해당 커밋에 포함된 파일의 내용 출력\n\n\n\nshow 명령의 옵션\n\n--name-only &lt;유형&gt;\n\n파일 이름만 출력",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#실습-5-show-명령",
    "href": "commit_analysis.html#실습-5-show-명령",
    "title": "커밋 분석",
    "section": "실습 5: show 명령",
    "text": "실습 5: show 명령\n\ngit show HEAD\n\ncommit a19df1c691f07db739c592d0666ba8c55b363512 (HEAD -&gt; main)\nAuthor: user &lt;user@company.com&gt;\nDate:   Thu Sep 18 22:23:36 2025 +0900\n\n    c3\n\ndiff --git a/file1.txt b/file1.txt\ndeleted file mode 100644\nindex 2d3586b..0000000\n--- a/file1.txt\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-file1 line 1\n-file1 line 2\ndiff --git a/sub/file3.txt b/sub/file3.txt\nnew file mode 100644\nindex 0000000..4abff17\n--- /dev/null\n+++ b/sub/file3.txt\n@@ -0,0 +1 @@\n+file3 line 1\n\n\n\ngit show --name-status HEAD\n\ncommit a19df1c691f07db739c592d0666ba8c55b363512 (HEAD -&gt; main)\nAuthor: user &lt;user@company.com&gt;\nDate:   Thu Sep 18 22:23:36 2025 +0900\n\n    c3\n\nD   file1.txt\nA   sub/file3.txt\n\n\n\ngit show HEAD:file2.txt\n\nfile2 line 1\n\n\n\ngit show --name-status HEAD~1\n\ncommit 211266b71656a9d2c504d278621547a059aa4b91\nAuthor: user &lt;user@company.com&gt;\nDate:   Thu Sep 18 22:23:36 2025 +0900\n\n    c2\n\nM   file1.txt\nA   file2.txt",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#diff-명령",
    "href": "commit_analysis.html#diff-명령",
    "title": "커밋 분석",
    "section": "diff 명령",
    "text": "diff 명령\n\ndiff 명령은 워크트리, 스테이지, 커밋간의 차이를 비교\n\n\ndiff 명령 사용법\n\n\n\n\n\n\n\n\n\n\n\n명령\n옵션\n인수1\n인수2\n비교대상1\n비교대상2\n\n\n\n\ngit diff\n-\n-\n-\n워크트리\n인덱스\n\n\ngit diff\n--cached\n-\n-\n스테이지\n헤드커밋\n\n\ngit diff\n-\n&lt;커밋참조&gt;\n-\n워크트리\n커밋\n\n\ngit diff\n--cached\n&lt;커밋참조&gt;\n-\n스테이지\n커밋\n\n\ngit diff\n-\n&lt;커밋참조1&gt;\n&lt;커밋참조2&gt;\n커밋1\n커밋2\n\n\n\n\n인덱스는 추후 인덱스 파일에서 다루지만\n\n기본적으로는 스테이징 영역을 나타낸다.\n하지만 헤드커밋의 파일도 포함한다.\n따라서 추적중인 파일이 워크트리에서 변경되면 아직 add를 하지 않은 상태, 즉 스테이징을 하지 않아도 diff 명령으로 비교가 가능",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "commit_analysis.html#실습-6-diff-명령",
    "href": "commit_analysis.html#실습-6-diff-명령",
    "title": "커밋 분석",
    "section": "실습 6: diff 명령",
    "text": "실습 6: diff 명령\n\n레포지토리 생성\n\n\ncd $HOME/lab\nrm -rf test_diff_01\ngit init test_diff_01\ncd test_diff_01\n\n\n\nInitialized empty Git repository in ~/lab/test_diff_01/.git/\n\n\n\n신규파일 생성 후\n\n\necho \"file1 line1\" &gt;&gt; file.txt\n\n\ngit status\n\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n비추적 상태의 신규 파일은 워크트리에 있어도 스테이지와 비교하지 않는다\n\n\ngit diff\n\n\n아직 add 전이므로 스테이지와 커밋도 동일\n\n\ngit diff --cached\n\n\nadd 스테이징 후\n\n\ngit add file.txt\n\n\ngit status\n\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   file.txt\n\n\n\n\nadd된 직후이므로 워크트리와 스테이지는 동일\n\n\ngit diff\n\n\n스테이지에는 신규파일이 있고 커밋에는 없으므로 –cached 옵션에는 표시됨\n\n\ngit diff --cached\n\ndiff --git a/file.txt b/file.txt\nnew file mode 100644\nindex 0000000..0b11cfc\n--- /dev/null\n+++ b/file.txt\n@@ -0,0 +1 @@\n+file1 line1\n\n\n\n커밋 후\n\n\ngit commit -m c1\n\n[main (root-commit) 4965752] c1\n 1 file changed, 1 insertion(+)\n create mode 100644 file.txt\n\n\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\n커밋 직후에는 워크트리, 스테이지, 헤드커밋이 동일\n\n\ngit diff\n\n\ngit diff --cached\n\n\n추적 상태의 파일이 변경된 경우\n\n\necho \"file1 line2\" &gt;&gt; file.txt\n\n\ngit status\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   file.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n추적 상태의 파일이 변경되면 인덱스와 달라짐\n\n\ngit diff\n\ndiff --git a/file.txt b/file.txt\nindex 0b11cfc..d037497 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1,2 @@\n file1 line1\n+file1 line2\n\n\n\n이는 헤드커밋과 직접 비교한 것과 같음\n\n\ngit diff HEAD\n\ndiff --git a/file.txt b/file.txt\nindex 0b11cfc..d037497 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1,2 @@\n file1 line1\n+file1 line2\n\n\n\n아직 스테이지에는 변경이 반영되지 않았기 때문에 스테이지와 헤드커밋은 동일함\n\n\ngit diff --cached\n\n\n스테이징\n\n\ngit add file.txt\n\n\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   file.txt\n\n\n\n\n스테이징 되면 인덱스(스테이지)가 워크트리와 같아지므로 diff에 나타나지 않음\n\n\ngit diff\n\n\n이제는 스테이지와 헤드커밋이 달라지므로 diff –cached 명령에 나타남\n\n\ngit diff --cached\n\ndiff --git a/file.txt b/file.txt\nindex 0b11cfc..d037497 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1,2 @@\n file1 line1\n+file1 line2\n\n\n\n워크트리와 헤드커밋을 직접 비교해도 같은 결과임\n\n\ngit diff HEAD\n\ndiff --git a/file.txt b/file.txt\nindex 0b11cfc..d037497 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1,2 @@\n file1 line1\n+file1 line2\n\n\n\n일단 커밋하면 모든 상태가 같으므로 어떤 diff 명령도 차이를 보이지 않음\n\n\ngit commit -m c2\n\n[main 963ecf0] c2\n 1 file changed, 1 insertion(+)\n\n\n\ngit diff\n\n\ngit diff --cached\n\n\ngit diff HEAD\n\n\n추적중인 파일 삭제\n\n\nrm -f file.txt\n\n\ngit status\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    deleted:    file.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\ngit diff\n\ndiff --git a/file.txt b/file.txt\ndeleted file mode 100644\nindex d037497..0000000\n--- a/file.txt\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-file1 line1\n-file1 line2\n\n\n\ngit diff HEAD\n\ndiff --git a/file.txt b/file.txt\ndeleted file mode 100644\nindex d037497..0000000\n--- a/file.txt\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-file1 line1\n-file1 line2\n\n\n\ngit diff --cached\n\n\ngit add .\n\n\ngit diff\n\n\ngit diff --cached\n\ndiff --git a/file.txt b/file.txt\ndeleted file mode 100644\nindex d037497..0000000\n--- a/file.txt\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-file1 line1\n-file1 line2\n\n\n\ngit diff HEAD\n\ndiff --git a/file.txt b/file.txt\ndeleted file mode 100644\nindex d037497..0000000\n--- a/file.txt\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-file1 line1\n-file1 line2\n\n\n\ngit commit -m c3\n\n[main c8b034c] c3\n 1 file changed, 2 deletions(-)\n delete mode 100644 file.txt\n\n\n\ngit diff\n\n\ngit diff --cached\n\n\ngit diff HEAD",
    "crumbs": [
      "사용자용 기초",
      "커밋 분석"
    ]
  },
  {
    "objectID": "branch.html",
    "href": "branch.html",
    "title": "브랜치",
    "section": "",
    "text": "Building Git, Ch. 13 Branching Out\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A1460%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#참고-문헌",
    "href": "branch.html#참고-문헌",
    "title": "브랜치",
    "section": "",
    "text": "Building Git, Ch. 13 Branching Out\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A1460%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#커밋-그래프",
    "href": "branch.html#커밋-그래프",
    "title": "브랜치",
    "section": "커밋 그래프",
    "text": "커밋 그래프\n\n커밋 객체는 부모 커밋을 가리키므로 커밋을 계속하면 사슬 형태의 커밋 연결관계가 생긴다.\n\n\n\n\n그림: 커밋 그래프의 예\n\n\n\n브랜치 기능을 사용하면 하나의 부모 커밋이 여러개의 자식 커밋을 가질 수도 있다.\n\n\n\n\n그림: 브랜치가 있는 커밋 그래프의 예\n\n\n\n머지 기능을 사용하면 하나의 자식 커밋이 2개의 부모 커밋을 가질 수도 있다.\n\n\n\n\n그림: 머지가 있는 커밋 그래프의 예\n\n\n\n따라서 일반적인 경우에 커밋 객체들은 컴퓨터 과학에서 말하는 그래프(graph) 구조를 가진다.",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#브랜치",
    "href": "branch.html#브랜치",
    "title": "브랜치",
    "section": "브랜치",
    "text": "브랜치\n\n말단 커밋(leaf commit)\n\n자신을 가리키는 자식 커밋이 없는 커밋\n\n브랜치(branch)\n\n말단 커밋에 대한 참조 이름\n하나의 말단 커밋이 여러개의 브랜치(참조 이름)를 가질 수 있다.\n\n\n\n\n\n그림: 하나의 브랜치를 가지는 커밋 그래프\n\n\n\n\n\n그림: 하나의 커밋에 두개의 브랜치가 있는 커밋 그래프\n\n\n\n\n\n그림: 복수의 브랜치를 가지는 커밋 그래프",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#브랜치-정보의-저장",
    "href": "branch.html#브랜치-정보의-저장",
    "title": "브랜치",
    "section": "브랜치 정보의 저장",
    "text": "브랜치 정보의 저장\n\n브랜치를 생성하면 해당 브랜치 정보는 .git/refs/heads/ 디렉토리 아래에 브랜치 이름과 같은 이름의 텍스트 파일로 저장된다.\n예를 들어 main 브랜치의 정보는 .git/refs/heads/main 파일로 저장된다.\n브랜치 정보 파일의 내용은 해당 브랜치의 마지막(최신) 커밋을 가리키는 해시값이다.",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#디폴트-브랜치",
    "href": "branch.html#디폴트-브랜치",
    "title": "브랜치",
    "section": "디폴트 브랜치",
    "text": "디폴트 브랜치\n\n레포지토리 생성 직후에는 브랜치가 존재하지 않는다.\n최초로 하나의 커밋을 만들면 미리 정해진 이름으로 최초 커밋을 가리키는 브랜치가 생성된다. 이를 디폴트 브랜치라고 한다.\ngit 자체의 디폴트 브랜치 이름은 master 이다.\n여기에서는 디폴트 브랜치 이름으로 main을 사용한다.\n\n\n디폴트 브랜치 이름 변경\n\n레포지토리 생성전에 init.defaultBranch 설정으로 디폴트 브랜치 이름을 미리 변경할 수 있다.\ngit config init.defaultBranch \"&lt;디폴트 브랜치 이름&gt;\"\n레포지토리 생성시에 --initial-branch 인수로 디폴트 브랜치 이름을 지정 가능\ngit init --initial-branch=\"&lt;최초 브랜치 이름&gt;\"\n\n일단 레포지토리가 생성되면 최초 커밋이 생성될 때 같이 생성되는 최초 브랜치 이름은 변경할 수 없다.\n일단 브랜치 생성 후에 이름을 바꾸는 것은 가능\n\n\n\n실습\n\n레포지토리 생성\n\n\ncd $HOME/lab\nrm -rf test_branch_01\ngit init test_branch_01\ncd test_branch_01\n\n\n최초 커밋\n\n\necho \"line 1\" &gt;&gt; file.txt\ngit add .\ngit commit -m c1\n\n[main (root-commit) 8e70f9e] c1\n 1 file changed, 1 insertion(+)\n create mode 100644 file.txt\n\n\n\n브랜치 정보 확인\n\n\npwd\nls -al .git/refs/heads\n\n/Users/joelkim/Work/personal/book_git/lab/test_branch_01\ntotal 8\ndrwxr-xr-x@ 3 joelkim  staff   96 Aug 14 17:55 .\ndrwxr-xr-x@ 4 joelkim  staff  128 Aug 14 17:55 ..\n-rw-r--r--@ 1 joelkim  staff   41 Aug 14 17:55 main\n\n\n\ncat .git/refs/heads/main\n\n8e70f9ee0f51d00a870ff44a64528c9ee4e1a60d",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#브랜치-명령",
    "href": "branch.html#브랜치-명령",
    "title": "브랜치",
    "section": "브랜치 명령",
    "text": "브랜치 명령\n\n\n\n\n\n\n\n\n목적\n명령\n설명\n\n\n\n\n브랜치 목록 조회\ngit branch\n현재 브랜치 앞에 * 표시\n\n\n신규 브랜치 생성\ngit branch &lt;생성할 브랜치 이름&gt;\n-\n\n\n브랜치 전환\ngit switch &lt;전환할 브랜치 이름&gt;\n버전 2.23 이후\n\n\n브랜치 전환\ngit checkout &lt;전환할 브랜치 이름&gt;\n버전 2.23 전\n\n\n신규 브랜치 생성하며 전환\ngit switch -c &lt;생성하고 전환할 브랜치 이름&gt;\n버전 2.23 이후\n\n\n신규 브랜치 생성하며 전환\ngit checkout -b &lt;생성하고 전환할 브랜치 이름&gt;\n버전 2.23 전\n\n\n기존 브랜치 이름 변경\ngit branch -m &lt;기존 브랜치 이름&gt; &lt;변경 후 브랜치 이름&gt;\n변경 후 브랜치 이름과 같은 브랜치가 존재하면 실패\n\n\n기존 브랜치 이름 강제 변경\ngit branch -M &lt;기존 브랜치 이름&gt; &lt;변경 후 브랜치 이름&gt;\n변경 후 브랜치 이름과 같은 브랜치가 존재해도 덮어씀\n\n\n브랜치 삭제\ngit branch -d &lt;기존 브랜치 이름&gt;\n현재 브랜치가 아니고 삭제되지 않는 브랜치에 병햡되어 있어야 삭제 가능\n\n\n브랜치 강제 삭제\ngit branch -D &lt;기존 브랜치 이름&gt;\n무조건 삭제",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#헤드-정보",
    "href": "branch.html#헤드-정보",
    "title": "브랜치",
    "section": "헤드 정보",
    "text": "헤드 정보\n\n헤드(HEAD) 정보는 사용자가 현재 어떤 브랜치에 있는지를 알려주는 정보다.\n.git/HEAD 텍스트 파일로 저장되어 관리된다.\n만약 현재 브랜치가 main 브랜치이면 .git/HEAD 파일의 내용은 다음과 같다.\nref: refs/heads/main\n\n\n실습\n\n현재 브랜치 목록 출력\n\n\ngit branch\n\n* main\n\n\n\n현재 브랜치 정보를 담고 있는 .git/HEAD 파일의 내용 확인\n\nmain 브랜치 정보를 담고 있는 브랜치 정보 파일을 가리킨다\n\n\n\ncat .git/HEAD\n\nref: refs/heads/main\n\n\n\n브랜치 정보 디렉토리내에는 main 브랜치 정보를 담고 있는 브랜치 정보 파일이 존재한다.\n\n\nls -al .git/refs/heads\n\ntotal 8\ndrwxr-xr-x@ 3 joelkim  staff   96 Aug 14 17:55 .\ndrwxr-xr-x@ 4 joelkim  staff  128 Aug 14 17:55 ..\n-rw-r--r--@ 1 joelkim  staff   41 Aug 14 17:55 main\n\n\n\nmain 브랜치 정보를 담고 있는 브랜치 파일의 내용 확인\n\nmain 브랜치의 마지막(최신) 커밋을 가리킨다\n\n\n\ncat .git/refs/heads/main\n\n8e70f9ee0f51d00a870ff44a64528c9ee4e1a60d\n\n\n\nb1 브랜치 생성\n\n\ngit branch b1\n\n\n현재 브랜치 목록 출력\n\n\ngit branch\n\n  b1\n* main\n\n\n\n브랜치 정보 디렉토리를 다시 확인하면 b1 이라는 브랜치 정보 파일이 만들어져 있다\n\n\nls -al .git/refs/heads\n\ntotal 16\ndrwxr-xr-x@ 4 joelkim  staff  128 Aug 14 17:55 .\ndrwxr-xr-x@ 4 joelkim  staff  128 Aug 14 17:55 ..\n-rw-r--r--@ 1 joelkim  staff   41 Aug 14 17:55 b1\n-rw-r--r--@ 1 joelkim  staff   41 Aug 14 17:55 main\n\n\n\nb1 브랜치로 전환\n\n\ngit switch b1\n\nSwitched to branch 'b1'\n\n\n\n현재 브랜치 목록 출력\n\n\ngit branch\n\n* b1\n  main\n\n\n\n현재 브랜치 정보를 담고 있는 .git/HEAD 파일의 내용 확인\n\n이제는 main 브랜치가 아닌 b1 브랜치를 가리키고 있다\n\n\n\ncat .git/HEAD\n\nref: refs/heads/b1\n\n\n\nb1 브랜치 정보를 담고 있는 브랜치 파일의 내용 확인\n\n브랜치는 다르지만 main 브랜치가 가리키는 커밋과 같은 커밋을 가리키고 있음\n\n\n\ncat .git/refs/heads/b1\n\n8e70f9ee0f51d00a870ff44a64528c9ee4e1a60d\n\n\n\nb2 브랜치를 생성하면서 전환\n\n\ngit switch -c b2\n\nSwitched to a new branch 'b2'\n\n\n\ngit branch\n\n  b1\n* b2\n  main\n\n\n\n현재 브랜치 정보를 담고 있는 .git/HEAD 파일의 내용 확인\n\n이제는 b1 브랜치가 아닌 b2 브랜치를 가리키고 있다\n\n\n\ncat .git/HEAD\n\nref: refs/heads/b2\n\n\n\n파일 변경\n\n\necho \"line 2\" &gt;&gt; file.txt\ngit add .\ngit commit -m c2\n\n[b2 0cb5d23] c2\n 1 file changed, 1 insertion(+)\n\n\n\nb3 브랜치 생성 및 전환\n\n\ngit switch -c b3\n\nSwitched to a new branch 'b3'\n\n\n\nfile2.txt 파일 추가\n\n\ntouch file2.txt\ngit add .\ngit commit -m c3\n\n[b3 1a096bc] c3\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 file2.txt\n\n\n\n\n\n\n\n%%{\ninit: {\n   \"gitGraph\": {\n      \"rotateCommitLabel\": false\n   },\n   \"themeVariables\": {\n      \"commitLabelColor\": '#000000',\n      \"commitLabelBackground\": '#ffffff',\n      \"commitLabelFontSize\": '15px'\n   }\n}}%%\ngitGraph\n  commit id: \"c1\"\n  branch b1\n  branch b2\n  commit id: \"c2: file.txt 파일 변경\"\n  branch b3\n  commit id: \"c3: file2.txt 파일 추가\"\n\n\n\n\n\n\n\n\n\n파일\nb2\nb3\n\n\n\n\nfile.txt\n커밋\n커밋\n\n\nfile2.txt\n-\n커밋\n\n\nfile3.txt\n-\n-",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#브랜치-전환시의-파일-변화",
    "href": "branch.html#브랜치-전환시의-파일-변화",
    "title": "브랜치",
    "section": "브랜치 전환시의 파일 변화",
    "text": "브랜치 전환시의 파일 변화\n\n브랜치를 전환하면 출발지 브랜치와 목적지 브랜치에서 해당 파일이 커밋되어 있는지 여부에 따라 파일에 발생하는 현상이 달라진다.\n\n\n\n\n\n\n\n\n\n출발지 브랜치\n목적지 브랜치\n결과\n\n\n\n\n커밋\n커밋\n목적지 브랜치에 커밋된 내용으로 바뀐다.\n\n\n커밋\n-\n파일이 사라진다\n\n\n-\n커밋\n출발지 브랜치의 워크트리에 같은 이름의 파일이 있으면 실패, 없으면 생긴다.\n\n\n-\n-\n그대로 유지된다.\n\n\n\n\n실습\n\nb2 -&gt; b3 전환하면\n\nfile.txt 파일은 두 브랜치에 모두 있으므로 파일 내용이 바뀐다.\nfile2.txt 파일은 b1 브랜치에는 없지만 b2 브랜치에는 있으므로\n\n만약 file2.txt 라는 파일이 워크트리에 없으면 생긴다.\n만약 file2.txt 라는 파일이 워크트리에 있으면 에러\n\nfile3.txt 파일은 두 브랜치에 모두 없으므로 그냥 유지된다.\n\n우선 b1 브랜치로 전환\n\n\ngit switch b2\n\nSwitched to branch 'b2'\n\n\n\n비추적 상태의 파일 file3.txt 생성\n\n\ntouch file3.txt\nls -al\n\ntotal 8\ndrwxr-xr-x@  5 joelkim  staff  160 Aug 14 17:55 .\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 14 17:55 ..\ndrwxr-xr-x@ 12 joelkim  staff  384 Aug 14 17:55 .git\n-rw-r--r--@  1 joelkim  staff   14 Aug 14 17:55 file.txt\n-rw-r--r--@  1 joelkim  staff    0 Aug 14 17:55 file3.txt\n\n\n\nb3 브랜치로 전환\n\n\ngit switch b3\n\nSwitched to branch 'b3'\n\n\n\nfile2.txt가 생기고 file3.txt는 그대로 유지\n\n\nls -al\n\ntotal 8\ndrwxr-xr-x@  6 joelkim  staff  192 Aug 14 17:55 .\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 14 17:55 ..\ndrwxr-xr-x@ 12 joelkim  staff  384 Aug 14 17:55 .git\n-rw-r--r--@  1 joelkim  staff   14 Aug 14 17:55 file.txt\n-rw-r--r--@  1 joelkim  staff    0 Aug 14 17:55 file2.txt\n-rw-r--r--@  1 joelkim  staff    0 Aug 14 17:55 file3.txt\n\n\n\n이번에는 다시 b2로 가서\n\n\ngit switch b2\n\nSwitched to branch 'b2'\n\n\n\n비추적 상태의 파일 file2.txt 생성\n\n\ntouch file2.txt\nls -al\n\ntotal 8\ndrwxr-xr-x@  6 joelkim  staff  192 Aug 14 17:55 .\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 14 17:55 ..\ndrwxr-xr-x@ 12 joelkim  staff  384 Aug 14 17:55 .git\n-rw-r--r--@  1 joelkim  staff   14 Aug 14 17:55 file.txt\n-rw-r--r--@  1 joelkim  staff    0 Aug 14 17:55 file2.txt\n-rw-r--r--@  1 joelkim  staff    0 Aug 14 17:55 file3.txt\n\n\n\nb3 브랜치로 전환하려고 하면 file2.txt가 생기며 같은 이름을 가진 비추적 상태의 파일을 덮어쓰게 되므로 에러 발생하여 전환 실패\n\n\ngit switch b3 || true\n\nerror: The following untracked working tree files would be overwritten by checkout:\n    file2.txt\nPlease move or remove them before you switch branches.\nAborting\n\n\n\nfile2.txt 파일이 없어야 전환이 가능하다.\n\n\nrm -f file2.txt\ngit switch b3\n\nSwitched to branch 'b3'\n\n\n\n반대로 b3 -&gt; b2 전환하면\n\nfile.txt 파일은 두 브랜치에 모두 있으므로 내용이 바뀜\nfile2.txt 파일은 b3 브랜치에는 있지만 b3 브랜치에는 없으므로 생긴다.\nfile3.txt 파일은 두 브랜치에 모두 없으므로 그냥 유지된다.\n\n\n\nls -al\n\ntotal 8\ndrwxr-xr-x@  6 joelkim  staff  192 Aug 14 17:55 .\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 14 17:55 ..\ndrwxr-xr-x@ 12 joelkim  staff  384 Aug 14 17:55 .git\n-rw-r--r--@  1 joelkim  staff   14 Aug 14 17:55 file.txt\n-rw-r--r--@  1 joelkim  staff    0 Aug 14 17:55 file2.txt\n-rw-r--r--@  1 joelkim  staff    0 Aug 14 17:55 file3.txt\n\n\n\ngit switch b2\n\nSwitched to branch 'b2'\n\n\n\nls -al\n\ntotal 8\ndrwxr-xr-x@  5 joelkim  staff  160 Aug 14 17:55 .\ndrwxr-xr-x@  4 joelkim  staff  128 Aug 14 17:55 ..\ndrwxr-xr-x@ 12 joelkim  staff  384 Aug 14 17:55 .git\n-rw-r--r--@  1 joelkim  staff   14 Aug 14 17:55 file.txt\n-rw-r--r--@  1 joelkim  staff    0 Aug 14 17:55 file3.txt",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "branch.html#브랜치-전환이-불가능한-상황",
    "href": "branch.html#브랜치-전환이-불가능한-상황",
    "title": "브랜치",
    "section": "브랜치 전환이 불가능한 상황",
    "text": "브랜치 전환이 불가능한 상황\n\n출발지 브랜치의 워크트리에 있는 파일의 상태가 다음과 같으면 전환할 수 없다.\n\n변경(modified), 삭제(deleted) 상태의 파일이 존재\n목적지 브랜치에 커밋되어 있는 파일과 같은 이름의 신규(new) 파일이 존재\n\n즉 변경/삭제 상태의 파일이 존재하지 않아야 하고, 신규파일의 경우 목적지 브랜치에 해당 이름의 파일이 없어야 한다.\n이는 브랜치를 전환하면서 현재 워크트리의 변경사항이 목적지 브랜치 내용으로 덮어씌워지는 것을 방지하기 위함이다.\n변경 혹은 신규 파일의 내용이 목적지 브랜치에 커밋된 파일과 같은 경우에도 상관없이 불가능하다.\n다만 브랜치 이름만 다르고 실제로 가리키는 커밋은 같은 경우, 즉 브랜치를 새로 만든 직후로 아직 새로운 커밋을 하기 전에는 무조건 전환이 가능하다\n\n\n실습\n\n브랜치 이름만 다르고 가리키는 커밋은 같은 경우\n\nmain 브랜치와 b1 브랜치는 브랜치 이름만 다를 뿐 실제로 가리키는 커밋이 같다.\n이 경우는 특수한 경우로 브랜치 전환에 아무런 제약이 없다.\nmain 브랜치로 전환하여\n\n\ngit switch main\n\nSwitched to branch 'main'\n\n\n\nfile.txt 파일을 변경한다.\n\n\necho \"line 2\" &gt;&gt; file.txt\ngit status\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   file.txt\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file3.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n그래도 b1 브랜치로 전환하는데 아무런 이상이 없다\n\n\ngit switch b1\n\nM   file.txt\nSwitched to branch 'b1'\n\n\n\nb1 브랜치에서 수정한 경우에도 마찬가지로 main 브랜치로 문제없이 전환된다.\n\n\necho \"line 3\" &gt;&gt; file.txt\ngit switch main\n\nM   file.txt\nSwitched to branch 'main'\n\n\n\n\n두 브랜치가 실제로 다른 커밋을 가리키는 경우\n\n이제는 실질적으로 다른 브랜치인 b2 브랜치과 b3 브랜치 간에서 전환해 본다.\n워크트리 상태를 원복하고\n\n\ngit restore .\n\n\nb2 브랜치로 전환한다.\n\n\ngit switch b2\n\nSwitched to branch 'b2'\n\n\n\n이 때는 파일 file.txt가 변경(modified) 상태이므로 b2 브랜치로 전환이 불가능하다.\n\n\ngit status\n\nOn branch b2\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file3.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\ngit switch b3 || true\n\nSwitched to branch 'b3'\n\n\n\nfile.txt 파일의 현재 내용이 목적지 b2 브랜치의 file.txt 파일 내용과 같아도 마찬가지다.\n\n\ngit restore --source=b3 -- file.txt\ncat file.txt\n\nline 1\nline 2\n\n\n\ngit switch b3  || true\n\nAlready on 'b3'\n\n\n\n변경 파일이 아닌 신규 파일의 경우 목적지 브랜치에 해당 이름의 파일이 커밋되어 있는지 아닌지 여부에 따라 달라진다.\n일단 file.txt의 변경사항을 원복한다.\n\n\ngit restore .\n\n\n현재 file3.txt라는 신규 파일이 있지만 목적지 브랜치 b3에는 없다.\n\n\ngit status\n\nOn branch b3\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file3.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n따라서 b3 브랜치로 전환할 수 있다.\n\n\ngit switch b3\n\nAlready on 'b3'\n\n\n\n다시 b2 브랜치로 돌아가서\n\n\ngit switch b2\n\nSwitched to branch 'b2'\n\n\n\n이번에는 b3 브랜치에만 존재하는 file2.txt라는 이름의 파일을 생성한다.\n\n\ntouch file2.txt\ngit status\n\nOn branch b2\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file2.txt\n    file3.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n이 때는 file2.txt 파일의 현재 내용이 b3 브랜치의 file2.txt 내용으로 바뀌는 것을 막기 위해 b3 브랜치로 전환할 수 없다\n\n\ngit switch b3 || true\n\nerror: The following untracked working tree files would be overwritten by checkout:\n    file2.txt\nPlease move or remove them before you switch branches.\nAborting",
    "crumbs": [
      "사용자용 기초",
      "브랜치"
    ]
  },
  {
    "objectID": "basic.html",
    "href": "basic.html",
    "title": "기본 동작",
    "section": "",
    "text": "git의 파일 상태를 이해하기 위해서는 파일의 “위치”라는 개념을 상상하면 이해가 쉬움\n“위치” 개념은 git의 공식 설명은 아니며 이해를 돕기 위한 것임\n\n\n\n\n\n\n\n\n\n이름\n의미\n실제 위치\n\n\n\n\n워크트리(worktree)\n일반적인 디렉토리\n체크아웃 디렉토리\n\n\n스테이징 영역(staging area), 스테이지(stage) 또는 인덱스(index)\n레포지토리에 들어가기전의 임시 위치\n.git 디렉토리의 objects 서브디렉토리와 .git 디렉토리의 index 파일\n\n\n레포지토리(repository)\n버전 기록이 저장되는 위치\n.git 디렉토리의 objects 서브디렉토리\n\n\n\n\n\n\n그림: 파일의 위치",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#파일의-위치",
    "href": "basic.html#파일의-위치",
    "title": "기본 동작",
    "section": "",
    "text": "git의 파일 상태를 이해하기 위해서는 파일의 “위치”라는 개념을 상상하면 이해가 쉬움\n“위치” 개념은 git의 공식 설명은 아니며 이해를 돕기 위한 것임\n\n\n\n\n\n\n\n\n\n이름\n의미\n실제 위치\n\n\n\n\n워크트리(worktree)\n일반적인 디렉토리\n체크아웃 디렉토리\n\n\n스테이징 영역(staging area), 스테이지(stage) 또는 인덱스(index)\n레포지토리에 들어가기전의 임시 위치\n.git 디렉토리의 objects 서브디렉토리와 .git 디렉토리의 index 파일\n\n\n레포지토리(repository)\n버전 기록이 저장되는 위치\n.git 디렉토리의 objects 서브디렉토리\n\n\n\n\n\n\n그림: 파일의 위치",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#파일의-추적-여부",
    "href": "basic.html#파일의-추적-여부",
    "title": "기본 동작",
    "section": "파일의 추적 여부",
    "text": "파일의 추적 여부\n\n비추적(untracked) 파일: 레포지토리에 기록되지 않은 파일\n추적(tracked) 파일: 레포지토리에 기록된 파일",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#파일의-상태",
    "href": "basic.html#파일의-상태",
    "title": "기본 동작",
    "section": "파일의 상태",
    "text": "파일의 상태\n\n워크트리와 스테이지에 있는 파일은 상태(status)를 가진다.\n2글자로 표시되며 글자의 위치가 파일의 위치를 가리킨다.\n글자가 뒤에 있고 앞가 공백이면 위크트리에 존재하는 파일\n글자가 앞에 있고 뒤가 공백이면 스테이지에 존재하는 파일\n\n\n\n\n\n\n\n\n\n\n\n위치\n추적/비추적\n상태\n표시\n설명\n\n\n\n\n워크트리\nuntracked\nnew\n“??”\n레포지토리에 기록되지 않거나 스테이지에 올라가지 않은 파일\n\n\n \ntracked\nclean\n미표시\n레포지토리에 기록된 파일로 레포지토리와 파일 내용이 같은 상태\n\n\n \ntracked\nmodified\n“␣M”\n레포지토리에 기록된 파일로 레포지토리와 파일 내용이 다른 상태\n\n\n \ntracked\ndeleted\n“␣D”\n레포지토리에 기록된 파일로 삭제된 상태\n\n\n \ntracked\nrenamed\n“␣R”\n레포지토리에 기록된 파일로 이름이 바뀐 상태\n\n\n스테이지\nuntracked\nadded\n“A␣”\n처음으로 기록되어 스테이지에 들어온 상태\n\n\n \ntracked\nmodified\n“M␣”\n예전에 기록된 파일로 변경되어 스테이지에 들어온 상태\n\n\n \ntracked\ndeleted\n“D␣”\n예전에 기록된 파일로 삭제되어 스테이지에 들어온 상태\n\n\n \ntracked\nrenamed\n“R␣”\n예전에 기록된 파일로 이름이 바뀌어 스테이지에 들어온 상태",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#status-명령",
    "href": "basic.html#status-명령",
    "title": "기본 동작",
    "section": "status 명령",
    "text": "status 명령\n\nstatus 명령을 사용하면 파일의 위치 및 상태를 볼 수 있음",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#실습-1-레포지토리-생성",
    "href": "basic.html#실습-1-레포지토리-생성",
    "title": "기본 동작",
    "section": "실습 1: 레포지토리 생성",
    "text": "실습 1: 레포지토리 생성\n\n레포지토리 생성\n\n\ncd $HOME/lab\nrm -rf test_basic_01\ngit init test_basic_01\n\n\n\nInitialized empty Git repository in ~/lab/test_basic_01/.git/\n\n\n\n상태 확인\n\n\ncd test_basic_01\ngit status\n\nOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#기본-동작",
    "href": "basic.html#기본-동작",
    "title": "기본 동작",
    "section": "기본 동작",
    "text": "기본 동작\n\n\n\n\n\n\n\n\n\n동작\n명령\n내용\n설명\n\n\n\n\n스테이징(staging)\nadd\n워크트리의 파일을 스테이지로 복사\n스테이지에 워트크리 파일의 복사본이 생기고 워크트리의 파일은 그대로 유지\n\n\n커밋(commit)\ncommit\n스테이지의 파일을 레포지토리로 이동\n레포지토리에 스테이지 파일의 복사본이 생기고 스테이지의 파일은 없어짐\n\n\n스테이징 취소(unstaging)\nrestore –staged\n스테이지의 파일을 없앰\n스테이지에 레포지토리 파일을 복사하면서 스테이지 파일이 없어지고 워크트리는 그대로 유지\n\n\n워크트리 원복(restore)\nrestore\n워크트리의 파일을 레포지토리의 파일로 원복\n워크트리에 스테이지 파일을 복사하면서 워크트리의 파일의 변화가 없어짐",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#add-commit-명령",
    "href": "basic.html#add-commit-명령",
    "title": "기본 동작",
    "section": "add, commit 명령",
    "text": "add, commit 명령\n\nadd, commit 명령을 이용하면 스테이지 또는 레포지토리에 파일을 생성할 수 있음\nadd 명령은 워크트리의 파일을 스테이지로 복사하고 워크트리의 파일은 그대로 유지 (워크트리 -&gt; 스테이지)\ncommit 명령은 스테이지의 파일을 레포지토리로 복사하고 스테이지의 파일을 삭제 (스테이지 -&gt; 레포지토리)\n\n\n\n\n\n\n\n\n\n\n\n\n행위\n워크트리\n스테이지\n레포지토리\n명령\n설명\n\n\n\n\n스테이징\n(1) 워크트리 파일 내용을 이용하여\n(2) 스테이지 파일 추가(갱신)\n-\ngit add\n스테이지에 워크트리 파일 추가(갱신)\n\n\n커밋\n-\n(1) 스테이지 파일 내용을 이용하여\n(2) 레포 파일 추가(갱신)\ngit commit\n레포에 스테이지 파일 추가(갱신)",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#실습-2-add-commit",
    "href": "basic.html#실습-2-add-commit",
    "title": "기본 동작",
    "section": "실습 2: add, commit",
    "text": "실습 2: add, commit\n\n\n파일 생성\n\n\n\necho \"line 1\" &gt;&gt; file.txt\nls -l\n\ntotal 8\n-rw-r--r--@ 1 joelkim  staff  7 Aug 19 21:18 file.txt\n\n\n\ngit status    # 현재 상태 조회\n\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\ngit status -s\n\n?? file.txt\n\n\n\n\n\n그림: add 명령\n\n\n\n\n파일 add\n\n\n\ngit add file.txt\n\n\ngit status\n\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   file.txt\n\n\n\n\ngit status -s\n\nA  file.txt\n\n\n\n\n\n그림: add 명령\n\n\n\n\n파일 커밋\n\n\n\ngit commit -m c1\n\n[main (root-commit) a6138ab] c1\n 1 file changed, 1 insertion(+)\n create mode 100644 file.txt\n\n\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\ngit status -s\n\n\n\n\n그림: commit 명령\n\n\n\n\n파일 수정\n\n\n\necho \"line 2\" &gt;&gt; file.txt\n\n\ngit status\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   file.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\ngit status -s\n\n M file.txt\n\n\n\n\n\n그림: tracked 파일 변경\n\n\n\n\n수정 파일 add\n\n\n\ngit add file.txt\n\n\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   file.txt\n\n\n\n\ngit status -s\n\nM  file.txt\n\n\n\n\n\n그림: tracked 파일 add\n\n\n\n\n수정 파일 commit\n\n\n\ngit commit -m c2\n\n[main 9e78135] c2\n 1 file changed, 1 insertion(+)\n\n\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\ngit status -s\n\n\n\n\n그림: tracked 파일 comit\n\n\n\n상태 변화도\n\n\n\n\n\nflowchart TB\n  subgraph 워크트리\n    start([\" \"])\n    untracked[\"untracked, new\"]\n    clean[\"tracked, clean\"]\n    modified[\"tracked, modified\"]\n    renamed[\"tracked, renamed\"]\n    deleted[\"tracked, deleted\"]\n  end\n\n  subgraph 스테이지\n    add_in_stage[\"untracked, add\"]\n    modified_in_stage[\"tracked, modified\"]\n    renamed_in_stage[\"tracked, renamed\"]\n    deleted_in_stage[\"tracked, deleted\"]\n  end\n\n  subgraph 레포지토리\n    commit\n\n  end\n\n  start -- \"(1) 파일 생성\" --&gt; untracked -- \"(2) git add\" --&gt; add_in_stage -- \"(3) git commit\" --&gt; commit\n  untracked -- \"(3) git commit\" --&gt; clean\n  clean -- \"(4) 파일 수정\" --&gt; modified -- \"(5) git add\" --&gt; modified_in_stage -- \"(6) git commit\" --&gt; commit\n  clean -- \"파일 이름변경\" --&gt; renamed -- \"git add\" --&gt; renamed_in_stage -- \"git commit\" --&gt; commit\n  clean -- \"파일 삭제\" --&gt; deleted -- \"git add\" --&gt; deleted_in_stage -- \"git commit\" --&gt; commit\n\n    \n\n\n\n\n\n\n\n\nadd 명령과 commit 명령이 분리된 이유\n\ncommit 명령에 파일 또는 디렉토리 경로를 붙여서 바로 레포지토리로 넣으면 스테이지 단계가 필요하지 않다.\n그러나 이렇게 명령의 인수로 사용하는 경우 오타나 실수로 잘못된 파일을 레포지토리에 넣거나 넣어야 할 파일을 누락할 가능성이 있다.\n한 번 레포지토리에 들어가면 이후 두번째 커밋으로 해당 파일으르 삭제하더라도 기록이 남는다.\n따라서 add 명령으로 commit 명령의 인수가 될 파일 목록을 편집(추가 또는 수정, 삭제)할 기회를 제공한다.\n\n\n\n추가적인 사용법\n\ncommit 파일_또는_디렉토리_경로 형식으로 파일이나 디렉토리의 경로를 지정하면 스테이지의 파일 전체 목록을 무시하고 해당 파일만 레포지토리로 복사함 (일단 add 명령으로 스테이지에 존재하고 있어야 하며 스테이지의 다른 파일들은 스테이지에 그대로 남아 있게 됨)\ncommit -a 파일_또는_디렉토리_경로 형식으로 -a 옵션을 사용하면 add 단계를 자체적으로 실행하므로 별도의 git add 없이 바로 스테이지를 거쳐 레포지토리에 커밋됨 (커밋 후에는 스테이지에서 삭제됨)",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#restore-명령",
    "href": "basic.html#restore-명령",
    "title": "기본 동작",
    "section": "restore 명령",
    "text": "restore 명령\n\nrestore 명령을 이용하면 스테이지 또는 레포지토리에 파일을 원복할 수 있음\n--staged 인수가 있는 restore --staged 명령은 레포지토리의 파일을 스테이지로 복사함으로써 스테이지의 파일을 삭제하고 워크트리의 파일은 그대로 유지 (git add 명령의 취소)\n인수가 없는 restore 명령은 레포지토리 또는 스테이지의 파일을 워크트리로 복사함으로써 워크트리의 파일을 원복시킨다. (파일 편집 취소)\n\n만약 스테이지에 들어간 내용이 없으면 레포지토리의 내용으로 덮어쓴다.\n만약 변경되어 스테이지에 들어간 내용이 있으면 레포지토리가 아닌 스테이지의 내용으로 덮어쓴다.\n\n만약 워크트리도 원복하고 스테이지에 add된 파일도 없애려면 restore --staged 명령과 restore 명령을 순차적으로 (순서가 중요함!) 실행해야 함\n워크트리/스테이지 동시 원복은 reset --hard HEAD 명령으로 한번에 가능하지만 권장하지 않음\n\n\n\n\n\n\n\n\n\n\n\n\n행위\n워크트리\n스테이지\n레포지토리\n명령\n설명\n\n\n\n\n스테이징 취소\n-\n(2) 스테이지 파일 삭제\n(1) 레포 파일 내용을 이용하여\ngit restore --staged\n스테이지 파일이 있으면 스테이지 파일 삭제, 없으면 아무 일도 일어나지 않는다. 즉, 커밋될 예정인 파일 목록에서 파일을 없앤다\n\n\n워크트리 원복\n(2) 워크트리 파일 원복\n(1) 스테이지 파일 내용을 이용하여\n-\ngit restore\n워크트리의 변경된 파일을 마지막 스테이징된 상태로 되돌린다.",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#실습-3-restore",
    "href": "basic.html#실습-3-restore",
    "title": "기본 동작",
    "section": "실습 3: restore",
    "text": "실습 3: restore\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\n파일 변경\n\n\necho \"line 3\" &gt;&gt; file.txt\ngit status\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   file.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n스테이징 하기 전에 git restore 명령을 사용하면 레포지토리 버전으로 원복\n\n\ngit restore file.txt\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\n\n\n그림: git restore\n\n\n\n다시 변경 후 add 명령으로 스테이징\n\n\necho \"line 3\" &gt;&gt; file.txt\ngit add file.txt\n\n\ngit restore --staged 명령을 사용하면 레포지토리 버전으로 스테이지를 덮어 쓴다. 즉 add 명령을 취소한 셈이 된다. 워크트리의 변경사항은 그대로 유지된다.\n\n\ngit restore --staged file.txt\ngit status\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   file.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n\n\n그림: git restore –staged\n\n\n\n이번에는 스테이에 add 한 후에 다시 워크트리의 파일을 변경\n\n\ngit add file.txt\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   file.txt\n\n\n\n\ncat file.txt\n\nline 1\nline 2\nline 3\n\n\n\n스테이지에 add 한 파일이 있는 경우 git restore를 하면 레포지토리가 아닌 스테이지의 파일로 워크트리를 덮어쓰므로 워크트리(와 스테이지 모두)에는 아무런 변화가 없다.\n\n\ngit restore file.txt\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   file.txt\n\n\n\n\ncat file.txt\n\nline 1\nline 2\nline 3\n\n\n\n\n\n그림: 스테이지에 파일이 있는 경우 git restore\n\n\n\n이제는 스테이지에 파알을 add 한 이후에 다시 워크트리 파일을 수정한다.\n\n\necho \"line 4\" &gt;&gt; file.txt\n\n\n이렇게 하면 레포지토리, 스테이지, 워크트리의 파일이 모두 다름\n\n\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   file.txt\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   file.txt\n\n\n\n\n레포지토리 버전\n\n\ngit show HEAD:file.txt\n\nline 1\nline 2\n\n\n\n스테이지 버전\n\n\ngit show :file.txt\n\nline 1\nline 2\nline 3\n\n\n\n워크트리 버전\n\n\ncat file.txt\n\nline 1\nline 2\nline 3\nline 4\n\n\n\n이 때 git restore 명령을 실행하면 스테이지에 파일이 있으므로 스테이지 버전으로 워크트리를 덮어쓴다.\n\n\ngit restore file.txt\n\n\n따라서 마지막 워크트리 변경사항만 없어지고 스테이징한 변경사항은 그대로 남는다.\n\n\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   file.txt\n\n\n\n\ncat file.txt\n\nline 1\nline 2\nline 3\n\n\n\n\n\n그림: 스테이지 파일이 있는 경우의 git restore\n\n\n\ngit restore --staged 명령은 레포지토리 버전으로 스테이지 파일을 원복한다.\n\n\ngit restore --staged file.txt\ngit status\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   file.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n\n\n그림: git restore –staged\n\n\n\n다시 git restore 명령을 하면 워크트리의 파일을 원복\n\n\n\n\n그림: git restore\n\n\n\ngit restore file.txt\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\n상태 변화도\n\n\n\n\n\nflowchart BT\n  subgraph 워크트리\n    untracked\n    clean\n    modified\n    renamed\n    deleted\n  end\n\n  subgraph 스테이지\n    new_in_stage[\"new\"]\n    modified_in_stage[\"modified\"]\n    renamed_in_stage[\"renamed\"]\n    deleted_in_stage[\"deleted\"]\n  end\n\n\n  modified -- \"git restore\" --&gt; clean\n  renamed -- \"git restore\" --&gt; clean\n  deleted -- \"git restore\" --&gt; clean\n  new_in_stage -- \"git restore --staged\" --&gt; untracked\n  modified_in_stage -- \"git restore --staged\" --&gt; modified\n  renamed_in_stage -- \"git restore --staged\" --&gt; renamed\n  deleted_in_stage -- \"git restore --staged\" --&gt; deleted",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#rm-명령",
    "href": "basic.html#rm-명령",
    "title": "기본 동작",
    "section": "rm 명령",
    "text": "rm 명령\n\n레포지토리의 파일을 삭제하는데 사용하는 명령\nrm 명령없이도 파일을 워크트리에서 삭제한 후 add, commit 명령을 하면 삭제됨\nrm 명령은 이 과정을 돕는 보조 명령\n\n\n\n\n\n\n\n\n\n\n\n행위\n워크트리\n스테이지\n레포지토리\n명령\n\n\n\n\n스테이지에 삭제 상태 추가\n워크트리의 해당 파일 유지\n삭제 상태 추가\n커밋 이후에 삭제됨\ngit rm --cached\n\n\n스테이지에 삭제 상태 추가하고 워크트리의 파일도 삭제\n워크트리의 해당 파일 삭제\n삭제 상태 추가\n커밋 이후에 삭제됨\ngit rm",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "basic.html#실습-4-rm",
    "href": "basic.html#실습-4-rm",
    "title": "기본 동작",
    "section": "실습 4: rm",
    "text": "실습 4: rm\n\n일반적 삭제 과정은 다음 순서를 따른다.\n\n워크트리에서 삭제\n삭제 정보를 스테이지에 add\ncommit 명령으로 삭제 확정\n\n\n\nls -l\n\ntotal 8\n-rw-r--r--@ 1 joelkim  staff  14 Aug 19 21:18 file.txt\n\n\n\n파일 삭제\n\n\nrm -f file.txt\n\n\nls -l\n\ntotal 0\n\n\n\n\n\n그림: 삭제 상태\n\n\n\nadd 명령으로 스테이징. 이 때 파일이 삭제되어 파일명 인수를 사용하지 못하므로 현재 디렉토리 사용\n\n\ngit add .\n\n\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    deleted:    file.txt\n\n\n\n\n\n\n그림: 삭제 add 상태\n\n\n\ncommit 명령으로 삭제 확정\n\n\ngit commit -m c3\n\n[main 5dd946f] c3\n 1 file changed, 2 deletions(-)\n delete mode 100644 file.txt\n\n\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\n\n\n그림: 삭제 확정 상태\n\n\n\ngit rm 명령을 실습하기 위해 git reset 명령으로 방금한 커밋을 취소하고 되돌아간다.\n\n\ngit reset --hard HEAD~1\n\nHEAD is now at 9e78135 c2\n\n\n\ngit rm 명령을 실행하면 1번과 2번 단계를 한 번에 실행한다. 즉, 워크트리에서 파일이 삭제되며 스테이지에 삭제 정보가 올라간다.\n\n\nls -l\n\ntotal 8\n-rw-r--r--@ 1 joelkim  staff  14 Aug 19 21:18 file.txt\n\n\n\ngit rm file.txt\n\nrm 'file.txt'\n\n\n\nls -l\n\ntotal 0\n\n\n\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    deleted:    file.txt\n\n\n\n\n이 상태에서 커밋을 하면 스테이지의 삭제 정보가 레포지토리로 들어가서 삭제가 확정된다.\n\n\ngit commit -m c3\n\n[main b9e6de8] c3\n 1 file changed, 2 deletions(-)\n delete mode 100644 file.txt\n\n\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\n이번에는 git rm –cached 를 실습하기 위해 git reset 명령으로 방금한 커밋을 취소하고 되돌아간다.\n\n\ngit reset --hard HEAD~1\n\nHEAD is now at 9e78135 c2\n\n\n\ngit rm –cached 명령을 실행하면 스테이지에 삭제 정보는 올라가지만 워크트리에는 그대로 남는다.\n\n\nls -l\n\ntotal 8\n-rw-r--r--@ 1 joelkim  staff  14 Aug 19 21:18 file.txt\n\n\n\ngit rm --cached file.txt\n\nrm 'file.txt'\n\n\n\nls -l\n\ntotal 8\n-rw-r--r--@ 1 joelkim  staff  14 Aug 19 21:18 file.txt\n\n\n\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    deleted:    file.txt\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file.txt\n\n\n\n\n따라서 삭제 후에는 워크트리에 untracked 파일로 인식된다.\n\n\ngit commit -m c3\n\n[main 98f5e88] c3\n 1 file changed, 2 deletions(-)\n delete mode 100644 file.txt\n\n\n\ngit status\n\nOn branch main\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)",
    "crumbs": [
      "사용자용 기초",
      "기본 동작"
    ]
  },
  {
    "objectID": "checkout.html",
    "href": "checkout.html",
    "title": "체크아웃",
    "section": "",
    "text": "과거 커밋이 존재하는 경우, 필요에 따라 과거의 커밋 상태로 되돌아 가는 것이 가능하다\n특정 커밋 시점으로 이동하는 것을 체크아웃이라고 한다.",
    "crumbs": [
      "사용자용 기초",
      "체크아웃"
    ]
  },
  {
    "objectID": "checkout.html#체크아웃",
    "href": "checkout.html#체크아웃",
    "title": "체크아웃",
    "section": "",
    "text": "과거 커밋이 존재하는 경우, 필요에 따라 과거의 커밋 상태로 되돌아 가는 것이 가능하다\n특정 커밋 시점으로 이동하는 것을 체크아웃이라고 한다.",
    "crumbs": [
      "사용자용 기초",
      "체크아웃"
    ]
  },
  {
    "objectID": "checkout.html#체크아웃-명령",
    "href": "checkout.html#체크아웃-명령",
    "title": "체크아웃",
    "section": "체크아웃 명령",
    "text": "체크아웃 명령\n\n과거 커밋으로 체크아웃\ngit checkout &lt;과거 커밋의 해시값&gt;\n특정 브랜치의 최신 커밋으로 체크아웃\ngit checkout &lt;브랜치 이름&gt;",
    "crumbs": [
      "사용자용 기초",
      "체크아웃"
    ]
  },
  {
    "objectID": "checkout.html#attached-상태와-detached-상태",
    "href": "checkout.html#attached-상태와-detached-상태",
    "title": "체크아웃",
    "section": "attached 상태와 detached 상태",
    "text": "attached 상태와 detached 상태\n\n\n\n\n\n\n\n\n헤드 상태\n설명\nHEAD 파일의 내용\n\n\n\n\nattached 상태\n헤드가 현재 브랜치의 가장 말단(최신) 커밋을 가리키고 있는 상태\nref: refs/heads/&lt;현재 브랜치 이름&gt;\n\n\ndetached 상태\n헤드가 브랜치의 과거 시점 커밋을 커밋을 가리키고 있는 상태\n가리키는 커밋의 해시값",
    "crumbs": [
      "사용자용 기초",
      "체크아웃"
    ]
  },
  {
    "objectID": "checkout.html#헤드-정보",
    "href": "checkout.html#헤드-정보",
    "title": "체크아웃",
    "section": "헤드 정보",
    "text": "헤드 정보\n\n헤드정보는 .git/HEAD 텍스트 파일로 저장되어 관리된다.\nattacehd 상태에서는 헤드(HEAD) 정보가 브랜치를 가리키지만\ndetached 상태에서는 헤드(HEAD) 정보가 커밋 해시값을 가진다.\n\n\n실습\n\n저장소 생성\n\n\nrm -rf test_checkout_01\ngit init test_checkout_01\ncd test_checkout_01\n\n\n\nInitialized empty Git repository in /test_checkout_01/.git/\n\n\n\n커밋 c1\n\nfile1.txt 추가\n\n\n\necho \"file1 line 1\" &gt;&gt; file1.txt\ngit add .\ngit commit -m c1\n\n[main (root-commit) e5b1c6f] c1\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n\n\n\n커밋 c2\n\nfile2.txt 추가\n\n\n\necho \"file1 line 2\" &gt;&gt; file1.txt\necho \"file2 line 1\" &gt;&gt; file2.txt\ngit add .\ngit commit -m c2\n\n[main 700fb5a] c2\n 2 files changed, 2 insertions(+)\n create mode 100644 file2.txt\n\n\n\n커밋 c3\n\nfile3.txt 추가\n\n\n\ngit rm file1.txt\nmkdir sub\necho \"file3 line 1\" &gt;&gt; sub/file3.txt\ngit add .\ngit commit -m c3\n\nrm 'file1.txt'\n[main 87bbcda] c3\n 2 files changed, 1 insertion(+), 2 deletions(-)\n delete mode 100644 file1.txt\n create mode 100644 sub/file3.txt\n\n\n\n현재 상태 확인\n\n\ngit log\n\ncommit 87bbcdaf15bea96b7e6e68406c8c354e94f78a48 (HEAD -&gt; main)\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:41 2025 +0900\n\n    c3\n\ncommit 700fb5af146f567d22db5245b620b7ce9b944ccc\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:40 2025 +0900\n\n    c2\n\ncommit e5b1c6fec8d49633243aa03fc156c55084be00b7\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:40 2025 +0900\n\n    c1\n\n\n\n\n\n그림: 예제 커밋 상황\n\n\n\n\n\nc1\nc2\nc3\n\n\n\n\nfile1.txt\nfile1.txt\n-\n\n\n-\nfile2.txt\nfile2.txt\n\n\n-\n-\nfile3.txt\n\n\n\n\n현재 main 브랜치 (말단 커밋)\n\n\ncat .git/HEAD\n\nref: refs/heads/main\n\n\n\ntree\n\n.\n├── file2.txt\n└── sub\n    └── file3.txt\n\n2 directories, 2 files\n\n\n\n바로 앞 커밋으로 체크아웃\n\n\ngit checkout HEAD~1\n\nNote: switching to 'HEAD~1'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 700fb5a c2\n\n\n\n현재 상태\n\n\ngit status\n\nHEAD detached at 700fb5a\nnothing to commit, working tree clean\n\n\n\ncat .git/HEAD\n\n700fb5af146f567d22db5245b620b7ce9b944ccc\n\n\n\n로그에는 c2까지만 출력\n\n\ngit log\n\ncommit 700fb5af146f567d22db5245b620b7ce9b944ccc (HEAD)\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:40 2025 +0900\n\n    c2\n\ncommit e5b1c6fec8d49633243aa03fc156c55084be00b7\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:40 2025 +0900\n\n    c1\n\n\n\ntree\n\n.\n├── file1.txt\n└── file2.txt\n\n1 directory, 2 files\n\n\n\n더 앞으로 체크아웃\n\n\ngit checkout HEAD~1\n\nPrevious HEAD position was 700fb5a c2\nHEAD is now at e5b1c6f c1\n\n\n\ngit status\n\nHEAD detached at e5b1c6f\nnothing to commit, working tree clean\n\n\n\ncat .git/HEAD\n\ne5b1c6fec8d49633243aa03fc156c55084be00b7\n\n\n\ngit log\n\ncommit e5b1c6fec8d49633243aa03fc156c55084be00b7 (HEAD)\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:40 2025 +0900\n\n    c1\n\n\n\ntree\n\n.\n└── file1.txt\n\n1 directory, 1 file\n\n\n\n도로 브랜치(말단 커밋)로 체크아웃\n\n\ngit checkout main\n\nPrevious HEAD position was e5b1c6f c1\nSwitched to branch 'main'\n\n\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\ncat .git/HEAD\n\nref: refs/heads/main\n\n\n\ngit log\n\ncommit 87bbcdaf15bea96b7e6e68406c8c354e94f78a48 (HEAD -&gt; main)\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:41 2025 +0900\n\n    c3\n\ncommit 700fb5af146f567d22db5245b620b7ce9b944ccc\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:40 2025 +0900\n\n    c2\n\ncommit e5b1c6fec8d49633243aa03fc156c55084be00b7\nAuthor: user &lt;user@company.com&gt;\nDate:   Sun Aug 17 10:35:40 2025 +0900\n\n    c1",
    "crumbs": [
      "사용자용 기초",
      "체크아웃"
    ]
  },
  {
    "objectID": "checkout.html#체크아웃시의-파일-변화",
    "href": "checkout.html#체크아웃시의-파일-변화",
    "title": "체크아웃",
    "section": "체크아웃시의 파일 변화",
    "text": "체크아웃시의 파일 변화\n\n체크아웃하면 출발지 커밋과 목적지 커밋에 해당 파일이 있는지 여부에 따라 파일에 발생하는 현상이 달라진다.\n\n\n\n\n\n\n\n\n\n출발지 커밋\n목적지 커밋\n결과\n\n\n\n\n커밋\n커밋\n목적지 커밋에 있는 내용으로 바뀐다.\n\n\n커밋\n-\n파일이 사라진다\n\n\n-\n커밋\n출발시점의 워크트리에 같은 이름의 파일이 있으면 실패, 없으면 생긴다.\n\n\n-\n-\n그대로 유지된다.\n\n\n\n\nfile4.txt라는 untracked 파일을 만들고 c3 -&gt; c2 로 체크아웃 하는 경우\n\n\n\n\n\n\n\n\n\n\n파일\n출발지 c3\n목적지 c2\n결과\n\n\n\n\nfile2.txt\n커밋\n커밋\n목적지 커밋에 있는 내용으로 바뀐다.\n\n\nfile3.txt\n커밋\n-\n파일이 사라진다\n\n\nfile1.txt\n-\n커밋\n출발시점의 워크트리에 같은 이름의 파일이 있으면 실패, 없으면 생긴다.\n\n\nfile4.txt\n-\n-\n그대로 유지된다.\n\n\n\n\n실습\n\ngit status\n\nOn branch main\nnothing to commit, working tree clean\n\n\n\nuntracked 파일 file4.txt 생성\n\n\ntouch file4.txt\n\n\ntree\n\n.\n├── file2.txt\n├── file4.txt\n└── sub\n    └── file3.txt\n\n2 directories, 3 files\n\n\n\nc2로 체크아웃\n\n\ngit checkout HEAD~1\n\nNote: switching to 'HEAD~1'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 700fb5a c2\n\n\n\nc2, c3에 모두 있는 file2.txt는 그대로\nc2에만 있는 file1.txt 생김\nc3에만 있는 file3.txt 사라짐\n모두 커밋되지 않은 file4.txt는 그대로\n\n\ntree\n\n.\n├── file1.txt\n├── file2.txt\n└── file4.txt\n\n1 directory, 3 files",
    "crumbs": [
      "사용자용 기초",
      "체크아웃"
    ]
  },
  {
    "objectID": "checkout.html#체크아웃-실패",
    "href": "checkout.html#체크아웃-실패",
    "title": "체크아웃",
    "section": "체크아웃 실패",
    "text": "체크아웃 실패\n\n체크아웃도 브랜치 전환과 마찬가지로 워크트리의 파일 상태에 따라 불가능한 경우가 있다.\n출발 시점에 워크트리에 있는 파일의 상태가 다음과 같으면 목적지 커밋으로 체크아웃 할 수 없다.\n\n변경(modified), 삭제(deleted) 상태의 파일이 존재\n목적지 커밋에 있는 파일과 같은 이름의 신규(untracked) 파일이 존재\n\n즉 변경/삭제 상태의 파일이 존재하지 않아야 하고, 신규파일의 경우 목적지 커밋에 해당 이름의 파일이 없어야 한다.\n이는 커밋을 전환하면서 현재 워크트리의 변경사항이 목적지 커밋의 내용으로 덮어씌워지는 것을 방지하기 위함이다.\n변경 혹은 신규 파일의 내용이 목적지 커밋된 있는 파일과 같은 경우에도 상관없이 불가능하다.\n다시 c3 커밋으로 복귀\n\n\ngit checkout main\n\nPrevious HEAD position was 700fb5a c2\nSwitched to branch 'main'\n\n\n\ntree\n\n.\n├── file2.txt\n├── file4.txt\n└── sub\n    └── file3.txt\n\n2 directories, 3 files\n\n\n\nfile2.txt 를 변경하여 변경상태로 만들면\n\n\necho \"file2 line 2\" &gt;&gt; file2.txt\ngit status\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   file2.txt\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file4.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n체크아웃 실패\n\n\ngit checkout HEAD~1 || true\n\nM   file2.txt\nNote: switching to 'HEAD~1'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 700fb5a c2\n\n\n\nfile2.txt를 복구하고 다시 시도하면 성공\n\n\ngit restore file2.txt\ngit status\n\nHEAD detached at 700fb5a\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file4.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\ngit checkout HEAD~1\n\nPrevious HEAD position was 700fb5a c2\nHEAD is now at e5b1c6f c1\n\n\n\n다시 c3로 체크아웃 한 뒤\n\n\ngit checkout main\n\nPrevious HEAD position was e5b1c6f c1\nSwitched to branch 'main'\n\n\n\nc2에만 있는 file1.txt와 같은 이름의 untracked 파일 생성\n\n\ntouch file1.txt\ntree\n\n.\n├── file1.txt\n├── file2.txt\n├── file4.txt\n└── sub\n    └── file3.txt\n\n2 directories, 4 files\n\n\n\n체크아웃 실패\n\n\ngit checkout HEAD~1 || true\n\nerror: The following untracked working tree files would be overwritten by checkout:\n    file1.txt\nPlease move or remove them before you switch branches.\nAborting\n\n\n\nfile1.txt 파일을 없애면 체크아웃 성공\n\n\nrm -r file1.txt\ngit checkout HEAD~1\n\nNote: switching to 'HEAD~1'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 700fb5a c2",
    "crumbs": [
      "사용자용 기초",
      "체크아웃"
    ]
  },
  {
    "objectID": "checkout.html#참조-로그",
    "href": "checkout.html#참조-로그",
    "title": "체크아웃",
    "section": "참조 로그",
    "text": "참조 로그\n\nreflog",
    "crumbs": [
      "사용자용 기초",
      "체크아웃"
    ]
  },
  {
    "objectID": "cowork.html",
    "href": "cowork.html",
    "title": "공동 작업",
    "section": "",
    "text": "기준 브랜치를 여러 사람이 공동으로 사용하는 경우,\n개발자 A가 기준 브랜치에 작업 브랜치를 반영하는 시점에 이미 다른 사람인 B가 기준 브랜치에 먼저 반영한 내용이 있을 수 있다.\n이 때는 작업 내용에 따라 A가 기준 브랜치에 작업 브랜치를 반영하는 작업이 충돌할 수 있다.\n기준 브랜치에 작업 브랜치를 반영하기 전에 먼저 기준 브랜치를 작업 브랜치에 반영하는 작업을 하면\n\n\n\n\n설명\n\n기준 브랜치를 혼자서 사용하는 경우\n또는 공동으로 사용하지만 작업 빈도가 적어서 내가 모르는 사이에 기준 브랜치에 새 커밋이 올라오지 않는 경우\n\n작업\n\n기준 브랜치에서 b 브랜치 생성\nb 브랜치에 c1 커밋 추가\n기준 브랜치에서 b1 브랜치 머지\n\n\n$ git init test_merge_1\nInitialized empty Git repository in test_merge_1/.git/\n$ cd test_merge_1 \n\n$ echo \"line 1\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c0\n[main (root-commit) f36cdc2] c0\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n\n$ git switch -c a\nSwitched to a new branch 'a'\n\n$ echo \"line 2\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c1\n[a 68971af] c1\n 1 file changed, 1 insertion(+)\n\n$ git switch main\nSwitched to branch 'main'\n$ git merge a -m \"merge a\"\nUpdating f36cdc2..68971af\nFast-forward (no commit created; -m option ignored)\n file1.txt | 1 +\n 1 file changed, 1 insertion(+)\n\n\n\n\n작업 순서\n\n기준 브랜치에서 b 브랜치 생성\nb 브랜치에 c1 커밋 추가 -&gt; 다른 사람이 먼저 머지\n기준 브랜치에 c2 커밋 추가\n기준 브랜치에서 b1 브랜치 머지 -&gt; 충돌\n\n만약 다른 사람이 기준 브랜치 머지를 하지 않으면 (2번이 없는 경우) 충돌이 발생하지 않음\n\n기준 브랜치에서 머지 취소 (merge --abort)\nb 브랜치에서 기준 브랜치 머지 -&gt; 충돌\n충돌 해결\n기준 브랜치에서 b1 브랜치 머지 -&gt; 성공\n\n\n\n\n\n\n설명\n\n레포를 공동으로 사용하는 경우\n기준 브랜치에 내가 모르는 사이에 커밋이 올라올 수 있다는 가정\n규칙: 작업 브랜치에 커밋하기 전에 항상 기준 브랜치를 백-머지(back-merge)해 주어야 함\n위 규칙을 지키면 충돌 가능성이 적어짐\n위 규칙을 지켜도 기준 브랜치에 머지 직전 다른 사람이 기준 브랜치에 커밋을 올릴 수도 있으므로 충돌 가능성은 존재\n공동 사용하는 사람이 적어서 기준 브랜치 머지 간격이 길면 충돌 가능성이 적어진다.\n\n작업 순서\n\n기준 브랜치에서 a 브랜치 생성\n기준 브랜치에 c2 커밋 추가 -&gt; 다른 사람이 먼저 머지\na 브랜치에서 기준 브랜치 머지\na 브랜치에 c1 커밋 추가\n기준 브랜치에서 b1 브랜치 머지\n\n\n\n\n\n\n설명\n\n레포를 공동으로 사용하는 경우\n작업 브랜치에 커밋하기 전에 백-머지(back-merge)를 했는데 그 이전에 다른 사람이 먼저 기준 브랜치에 커밋을 올린 경우\n백-머지시 충돌 발생\n충돌을 해결하고 커밋\n커밋 이후에 기준 브랜치에 머지\n이렇게 해도 백-머지와 기준 브랜치 머지 사이에 다른 사람이 먼저 먼저 기준 브랜치에 커밋을 올리면 충돌이 발생한다.\n많은 사람이 공동 사용해서 기준 브랜치 머지 간격이 아주 짧으면 충돌이 무한 반복될 수 있다.\n\n작업 순서\n\n기준 브랜치에서 b 브랜치 생성\n기준 브랜치에 c2 커밋 추가 -&gt; 다른 사람이 먼저 머지\nb 브랜치에 c1 커밋 추가\nb 브랜치에서 기준 브랜치 머지 -&gt; 충돌\n충돌 해결\n기준 브랜치에서 b1 브랜치 머지\n\n만약 5번과 6번 사이에 다른 사람이 기준 브랜치 머지하면 또 충돌 발생\n\n\n\n$ git init test_merge_4\nInitialized empty Git repository in test_merge_4/.git/\n$ cd test_merge_2\n\n$ echo \"line 1\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c0\n[main (root-commit) f36cdc2] c0\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n\n$ git switch -c a\nSwitched to a new branch 'a'\n\n$ echo \"line 2\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c1\n[a fb6bd2c] c1\n 1 file changed, 1 insertion(+)\n\n$ git switch main\nSwitched to branch 'main'\n\n\n$ echo \"line 3\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c1\n[main 7d13172] c2\n 1 file changed, 1 insertion(+)\n\n$ git merge a -m \"merge a\"\nAuto-merging file1.txt\nCONFLICT (content): Merge conflict in file1.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\n$ git status\nOn branch main\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n        both modified:   file1.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nline 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nline 3\n=======\nline 2\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; a",
    "crumbs": [
      "사용자용 기초",
      "공동 작업"
    ]
  },
  {
    "objectID": "cowork.html#기준-브랜치-반영-작업",
    "href": "cowork.html#기준-브랜치-반영-작업",
    "title": "공동 작업",
    "section": "",
    "text": "기준 브랜치를 여러 사람이 공동으로 사용하는 경우,\n개발자 A가 기준 브랜치에 작업 브랜치를 반영하는 시점에 이미 다른 사람인 B가 기준 브랜치에 먼저 반영한 내용이 있을 수 있다.\n이 때는 작업 내용에 따라 A가 기준 브랜치에 작업 브랜치를 반영하는 작업이 충돌할 수 있다.\n기준 브랜치에 작업 브랜치를 반영하기 전에 먼저 기준 브랜치를 작업 브랜치에 반영하는 작업을 하면\n\n\n\n\n설명\n\n기준 브랜치를 혼자서 사용하는 경우\n또는 공동으로 사용하지만 작업 빈도가 적어서 내가 모르는 사이에 기준 브랜치에 새 커밋이 올라오지 않는 경우\n\n작업\n\n기준 브랜치에서 b 브랜치 생성\nb 브랜치에 c1 커밋 추가\n기준 브랜치에서 b1 브랜치 머지\n\n\n$ git init test_merge_1\nInitialized empty Git repository in test_merge_1/.git/\n$ cd test_merge_1 \n\n$ echo \"line 1\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c0\n[main (root-commit) f36cdc2] c0\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n\n$ git switch -c a\nSwitched to a new branch 'a'\n\n$ echo \"line 2\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c1\n[a 68971af] c1\n 1 file changed, 1 insertion(+)\n\n$ git switch main\nSwitched to branch 'main'\n$ git merge a -m \"merge a\"\nUpdating f36cdc2..68971af\nFast-forward (no commit created; -m option ignored)\n file1.txt | 1 +\n 1 file changed, 1 insertion(+)\n\n\n\n\n작업 순서\n\n기준 브랜치에서 b 브랜치 생성\nb 브랜치에 c1 커밋 추가 -&gt; 다른 사람이 먼저 머지\n기준 브랜치에 c2 커밋 추가\n기준 브랜치에서 b1 브랜치 머지 -&gt; 충돌\n\n만약 다른 사람이 기준 브랜치 머지를 하지 않으면 (2번이 없는 경우) 충돌이 발생하지 않음\n\n기준 브랜치에서 머지 취소 (merge --abort)\nb 브랜치에서 기준 브랜치 머지 -&gt; 충돌\n충돌 해결\n기준 브랜치에서 b1 브랜치 머지 -&gt; 성공\n\n\n\n\n\n\n설명\n\n레포를 공동으로 사용하는 경우\n기준 브랜치에 내가 모르는 사이에 커밋이 올라올 수 있다는 가정\n규칙: 작업 브랜치에 커밋하기 전에 항상 기준 브랜치를 백-머지(back-merge)해 주어야 함\n위 규칙을 지키면 충돌 가능성이 적어짐\n위 규칙을 지켜도 기준 브랜치에 머지 직전 다른 사람이 기준 브랜치에 커밋을 올릴 수도 있으므로 충돌 가능성은 존재\n공동 사용하는 사람이 적어서 기준 브랜치 머지 간격이 길면 충돌 가능성이 적어진다.\n\n작업 순서\n\n기준 브랜치에서 a 브랜치 생성\n기준 브랜치에 c2 커밋 추가 -&gt; 다른 사람이 먼저 머지\na 브랜치에서 기준 브랜치 머지\na 브랜치에 c1 커밋 추가\n기준 브랜치에서 b1 브랜치 머지\n\n\n\n\n\n\n설명\n\n레포를 공동으로 사용하는 경우\n작업 브랜치에 커밋하기 전에 백-머지(back-merge)를 했는데 그 이전에 다른 사람이 먼저 기준 브랜치에 커밋을 올린 경우\n백-머지시 충돌 발생\n충돌을 해결하고 커밋\n커밋 이후에 기준 브랜치에 머지\n이렇게 해도 백-머지와 기준 브랜치 머지 사이에 다른 사람이 먼저 먼저 기준 브랜치에 커밋을 올리면 충돌이 발생한다.\n많은 사람이 공동 사용해서 기준 브랜치 머지 간격이 아주 짧으면 충돌이 무한 반복될 수 있다.\n\n작업 순서\n\n기준 브랜치에서 b 브랜치 생성\n기준 브랜치에 c2 커밋 추가 -&gt; 다른 사람이 먼저 머지\nb 브랜치에 c1 커밋 추가\nb 브랜치에서 기준 브랜치 머지 -&gt; 충돌\n충돌 해결\n기준 브랜치에서 b1 브랜치 머지\n\n만약 5번과 6번 사이에 다른 사람이 기준 브랜치 머지하면 또 충돌 발생\n\n\n\n$ git init test_merge_4\nInitialized empty Git repository in test_merge_4/.git/\n$ cd test_merge_2\n\n$ echo \"line 1\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c0\n[main (root-commit) f36cdc2] c0\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n\n$ git switch -c a\nSwitched to a new branch 'a'\n\n$ echo \"line 2\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c1\n[a fb6bd2c] c1\n 1 file changed, 1 insertion(+)\n\n$ git switch main\nSwitched to branch 'main'\n\n\n$ echo \"line 3\" &gt;&gt; file1.txt\n$ git add .\n$ git commit -m c1\n[main 7d13172] c2\n 1 file changed, 1 insertion(+)\n\n$ git merge a -m \"merge a\"\nAuto-merging file1.txt\nCONFLICT (content): Merge conflict in file1.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\n$ git status\nOn branch main\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n        both modified:   file1.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nline 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nline 3\n=======\nline 2\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; a",
    "crumbs": [
      "사용자용 기초",
      "공동 작업"
    ]
  },
  {
    "objectID": "figs/fig_graph.html",
    "href": "figs/fig_graph.html",
    "title": "Git Book",
    "section": "",
    "text": "%load_ext jupyter_tikz\n\n\npreamble = r\"\"\"\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\"\"\"\n\n\nstyle_git_commit = r\"\"\"\n    draw=black!70,\n    fill=green!20!lightgray,\n    minimum width=1.8cm,\n    minimum height=0.6cm,\n    rounded rectangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_commit_pointer = r\"\"\"\n    draw=black!70,\n    -Triangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_branch = r\"\"\"\n    draw=black!70,\n    fill=CornflowerBlue,\n    minimum width=1.5cm,\n    minimum height=0.5cm,\n    rectangle,\n    line width=1.2pt\n\"\"\"\n\n\nstyle_git_branch_pointer = r\"\"\"\n    draw=black!70,\n    -Triangle,\n    line width=1.2pt\n\"\"\"\n\n\nstyle_git_head = r\"\"\"\n    draw=black!70,\n    fill=Melon,\n    minimum width=2cm,\n    minimum height=1cm,\n    rectangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_head_pointer = r\"\"\"\n    draw=black!70,\n    densely dotted,\n    -Triangle,\n    line width=2pt\n\"\"\"\n\n\n%%tikz -S fig_graph_01 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\\begin{scope}[\n    every node/.style={(* style_git_commit *)},\n    every edge/.style={(* style_git_commit_pointer *)}\n]\n\\node (c1) at  (0,0) {c1};\n\\node (c2) at  (3,0) {c2}; \\path (c2) edge (c1);\n\\node (c3) at  (6,0) {c3}; \\path (c3) edge (c2);\n\\node (c4) at  (9,0) {c4}; \\path (c4) edge (c3);\n\\node (c5) at (12,0) {c5}; \\path (c5) edge (c4);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=green!20!lightgray,\n        minimum width=1.8cm,\n        minimum height=0.6cm,\n        rounded rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (c1) at  (0,0) {c1};\n    \\node (c2) at  (3,0) {c2}; \\path (c2) edge (c1);\n    \\node (c3) at  (6,0) {c3}; \\path (c3) edge (c2);\n    \\node (c4) at  (9,0) {c4}; \\path (c4) edge (c3);\n    \\node (c5) at (12,0) {c5}; \\path (c5) edge (c4);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_graph_02 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\\begin{scope}[\n    every node/.style={(* style_git_commit *)},\n    every edge/.style={(* style_git_commit_pointer *)}\n]\n\\node (c1)  at  (0,7)  {c1};\n\\node (c2)  at  (3,7)  {c2}; \\path  (c2) edge (c1);\n\\node (c3)  at  (6,7)  {c3}; \\path  (c3) edge (c2);\n\\node (c4)  at  (9,7)  {c4}; \\path  (c4) edge (c3);\n\\node (c5)  at (12,7)  {c5}; \\path  (c5) edge (c4);\n\\node (c6)  at  (6,5)  {c6}; \\path  (c6) edge (c2);\n\\node (c7)  at  (9,5)  {c7}; \\path  (c7) edge (c6);\n\\node (c8)  at (12,5)  {c8}; \\path  (c8) edge (c7);\n\\node (c9)  at  (6,3)  {c9}; \\path  (c9) edge (c2);\n\\node (c10) at  (9,3) {c10}; \\path (c10) edge (c9);\n\\node (c11) at  (9,1) {c11}; \\path (c11) edge (c9);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=green!20!lightgray,\n        minimum width=1.8cm,\n        minimum height=0.6cm,\n        rounded rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (c1)  at  (0,7)  {c1};\n    \\node (c2)  at  (3,7)  {c2}; \\path  (c2) edge (c1);\n    \\node (c3)  at  (6,7)  {c3}; \\path  (c3) edge (c2);\n    \\node (c4)  at  (9,7)  {c4}; \\path  (c4) edge (c3);\n    \\node (c5)  at (12,7)  {c5}; \\path  (c5) edge (c4);\n    \\node (c6)  at  (6,5)  {c6}; \\path  (c6) edge (c2);\n    \\node (c7)  at  (9,5)  {c7}; \\path  (c7) edge (c6);\n    \\node (c8)  at (12,5)  {c8}; \\path  (c8) edge (c7);\n    \\node (c9)  at  (6,3)  {c9}; \\path  (c9) edge (c2);\n    \\node (c10) at  (9,3) {c10}; \\path (c10) edge (c9);\n    \\node (c11) at  (9,1) {c11}; \\path (c11) edge (c9);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_graph_03 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\\begin{scope}[\n    every node/.style={(* style_git_commit *)},\n    every edge/.style={(* style_git_commit_pointer *)}\n]\n\\node (c1)  at  (0,7)  {c1};\n\\node (c2)  at  (3,7)  {c2}; \\path  (c2) edge (c1);\n\\node (c3)  at  (6,7)  {c3}; \\path  (c3) edge (c2);\n\\node (c4)  at  (9,7)  {c4}; \\path  (c4) edge (c3);\n\\node (c5)  at  (6,5)  {c5}; \\path  (c5) edge (c2);\n\\node (c6)  at  (9,5)  {c6}; \\path  (c6) edge (c5);\n\\node (c7)  at (12,7)  {c7}; \\path  (c7) edge (c4);\n                             \\path  (c7) edge (c6);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=green!20!lightgray,\n        minimum width=1.8cm,\n        minimum height=0.6cm,\n        rounded rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (c1)  at  (0,7)  {c1};\n    \\node (c2)  at  (3,7)  {c2}; \\path  (c2) edge (c1);\n    \\node (c3)  at  (6,7)  {c3}; \\path  (c3) edge (c2);\n    \\node (c4)  at  (9,7)  {c4}; \\path  (c4) edge (c3);\n    \\node (c5)  at  (6,5)  {c5}; \\path  (c5) edge (c2);\n    \\node (c6)  at  (9,5)  {c6}; \\path  (c6) edge (c5);\n    \\node (c7)  at (12,7)  {c7}; \\path  (c7) edge (c4);\n                                 \\path  (c7) edge (c6);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_graph_04 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\\begin{scope}[\n    every node/.style={(* style_git_commit *)},\n    every edge/.style={(* style_git_commit_pointer *)}\n]\n\\node (c1) at  (0,7) {c1};\n\\node (c2) at  (3,7) {c2}; \\path (c2) edge (c1);\n\\node (c3) at  (6,7) {c3}; \\path (c3) edge (c2);\n\\node (c4) at  (9,7) {c4}; \\path (c4) edge (c3);\n\\node[fill=red!20] (c5) at (12,7) {c5}; \\path (c5) edge (c4);\n\\end{scope}\n\n\\begin{scope}[\n    every node/.style={(* style_git_branch *)},\n    every edge/.style={(* style_git_branch_pointer *)}\n]\n\\node (main) at (12,6) {main}; \\path (main) edge (c5);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=green!20!lightgray,\n        minimum width=1.8cm,\n        minimum height=0.6cm,\n        rounded rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (c1) at  (0,7) {c1};\n    \\node (c2) at  (3,7) {c2}; \\path (c2) edge (c1);\n    \\node (c3) at  (6,7) {c3}; \\path (c3) edge (c2);\n    \\node (c4) at  (9,7) {c4}; \\path (c4) edge (c3);\n    \\node[fill=red!20] (c5) at (12,7) {c5}; \\path (c5) edge (c4);\n    \\end{scope}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=CornflowerBlue,\n        minimum width=1.5cm,\n        minimum height=0.5cm,\n        rectangle,\n        line width=1.2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt\n    }\n    ]\n    \\node (main) at (12,6) {main}; \\path (main) edge (c5);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_graph_05 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\\begin{scope}[\n    every node/.style={(* style_git_commit *)},\n    every edge/.style={(* style_git_commit_pointer *)}\n]\n\\node (c1) at  (0,7) {c1};\n\\node (c2) at  (3,7) {c2}; \\path (c2) edge (c1);\n\\node (c3) at  (6,7) {c3}; \\path (c3) edge (c2);\n\\node (c4) at  (9,7) {c4}; \\path (c4) edge (c3);\n\\node[fill=red!20] (c5) at (12,7) {c5}; \\path (c5) edge (c4);\n\\end{scope}\n\n\\begin{scope}[\n    every node/.style={(* style_git_branch *)},\n    every edge/.style={(* style_git_branch_pointer *)}\n]\n\\node (main) at (11,6) {main}; \\path (main) edge (c5);\n\\node (dev)  at (13,6) {dev};  \\path (dev) edge (c5);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=green!20!lightgray,\n        minimum width=1.8cm,\n        minimum height=0.6cm,\n        rounded rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (c1) at  (0,7) {c1};\n    \\node (c2) at  (3,7) {c2}; \\path (c2) edge (c1);\n    \\node (c3) at  (6,7) {c3}; \\path (c3) edge (c2);\n    \\node (c4) at  (9,7) {c4}; \\path (c4) edge (c3);\n    \\node[fill=red!20] (c5) at (12,7) {c5}; \\path (c5) edge (c4);\n    \\end{scope}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=CornflowerBlue,\n        minimum width=1.5cm,\n        minimum height=0.5cm,\n        rectangle,\n        line width=1.2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt\n    }\n    ]\n    \\node (main) at (11,6) {main}; \\path (main) edge (c5);\n    \\node (dev)  at (13,6) {dev};  \\path (dev) edge (c5);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}\n\n\n\n\n\n\n\n\n\n\n%%tikz -S fig_graph_06 -pt -e -tp xelatex -p \"$preamble\" -r -d 300\n\\begin{tikzpicture}\n\\begin{scope}[\n    every node/.style={(* style_git_commit *)},\n    every edge/.style={(* style_git_commit_pointer *)}\n]\n\\node (c1)  at  (0,7)  {c1};\n\\node (c2)  at  (3,7)  {c2}; \\path  (c2) edge (c1);\n\\node (c3)  at  (6,7)  {c3}; \\path  (c3) edge (c2);\n\\node (c4)  at  (9,7)  {c4}; \\path  (c4) edge (c3);\n\\node[fill=red!20] (c5)  at (12,7)  {c5}; \\path  (c5) edge (c4);\n\\node (c6)  at  (6,5)  {c6}; \\path  (c6) edge (c2);\n\\node (c7)  at  (9,5)  {c7}; \\path  (c7) edge (c6);\n\\node[fill=red!20] (c8)  at (12,5)  {c8}; \\path  (c8) edge (c7);\n\\node (c9)  at  (6,3)  {c9}; \\path  (c9) edge (c2);\n\\node[fill=red!20] (c10) at  (9,3) {c10}; \\path (c10) edge (c9);\n\\node[fill=red!20] (c11) at  (9,1) {c11}; \\path (c11) edge (c9);\n\\end{scope}\n\n\\begin{scope}[\n    every node/.style={(* style_git_branch *)},\n    every edge/.style={(* style_git_branch_pointer *)}\n]\n\\node (main) at (12,6) {main}; \\path (main) edge (c5);\n\\node (b1)   at (12,4) {b1};   \\path (b1)   edge (c8);\n\\node (b2)   at  (9,2) {b2};   \\path (b2)   edge (c10);\n\\node (b3)   at  (9,0) {b3};   \\path (b3)   edge (c11);\n\\end{scope}\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=green!20!lightgray,\n        minimum width=1.8cm,\n        minimum height=0.6cm,\n        rounded rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (c1)  at  (0,7)  {c1};\n    \\node (c2)  at  (3,7)  {c2}; \\path  (c2) edge (c1);\n    \\node (c3)  at  (6,7)  {c3}; \\path  (c3) edge (c2);\n    \\node (c4)  at  (9,7)  {c4}; \\path  (c4) edge (c3);\n    \\node[fill=red!20] (c5)  at (12,7)  {c5}; \\path  (c5) edge (c4);\n    \\node (c6)  at  (6,5)  {c6}; \\path  (c6) edge (c2);\n    \\node (c7)  at  (9,5)  {c7}; \\path  (c7) edge (c6);\n    \\node[fill=red!20] (c8)  at (12,5)  {c8}; \\path  (c8) edge (c7);\n    \\node (c9)  at  (6,3)  {c9}; \\path  (c9) edge (c2);\n    \\node[fill=red!20] (c10) at  (9,3) {c10}; \\path (c10) edge (c9);\n    \\node[fill=red!20] (c11) at  (9,1) {c11}; \\path (c11) edge (c9);\n    \\end{scope}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=CornflowerBlue,\n        minimum width=1.5cm,\n        minimum height=0.5cm,\n        rectangle,\n        line width=1.2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=1.2pt\n    }\n    ]\n    \\node (main) at (12,6) {main}; \\path (main) edge (c5);\n    \\node (b1)   at (12,4) {b1};   \\path (b1)   edge (c8);\n    \\node (b2)   at  (9,2) {b2};   \\path (b2)   edge (c10);\n    \\node (b3)   at  (9,0) {b3};   \\path (b3)   edge (c11);\n    \\end{scope}\n\n    \\end{tikzpicture}\n\\end{document}"
  },
  {
    "objectID": "figs/fig_log_01.html",
    "href": "figs/fig_log_01.html",
    "title": "Git Book",
    "section": "",
    "text": "%load_ext jupyter_tikz\n\n\npreamble = r\"\"\"\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\"\"\"\n\n\nstyle_git_commit = r\"\"\"\n    draw=black!70,\n    fill=green!20!lightgray,\n    minimum width=2cm,\n    minimum height=1cm,\n    rounded rectangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_commit_pointer = r\"\"\"\n    draw=black!70,\n    -Triangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_branch = r\"\"\"\n    draw=black!70,\n    fill=CornflowerBlue,\n    minimum width=2cm,\n    minimum height=1cm,\n    rectangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_branch_pointer = r\"\"\"\n    draw=black!70,\n    -Triangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_head = r\"\"\"\n    draw=black!70,\n    fill=Melon,\n    minimum width=2cm,\n    minimum height=1cm,\n    rectangle,\n    line width=2pt\n\"\"\"\n\n\nstyle_git_head_pointer = r\"\"\"\n    draw=black!70,\n    densely dotted,\n    -Triangle,\n    line width=2pt\n\"\"\"\n\n\n%%tikz -pt -e -tp xelatex -p \"$preamble\" -r -d 300 -S fig_log_01\n\\begin{tikzpicture}\n\\begin{scope}[\n    every node/.style={(* style_git_commit *)},\n    every edge/.style={(* style_git_commit_pointer *)}\n]\n\\node (c1) at (0,0) {c1};\n\\node (c2) at (3,0) {c2}; \\path (c2) edge (c1);\n\\node (c3) at (6,0) {c3}; \\path (c3) edge (c2);\n\\end{scope}\n\n\\begin{scope}[\n    every node/.style={(* style_git_branch *)},\n    every edge/.style={(* style_git_branch_pointer *)}\n]\n\\node (main) at (6,-2) {main}; \\path (main) edge (c3);\n\\end{scope}\n\n\\begin{scope}[\n    every node/.style={(* style_git_head *)},\n    every edge/.style={(* style_git_head_pointer *)}\n]\n\\node (HEAD) at (6,-4) {HEAD}; \\path (HEAD) edge (main);\n\\end{scope}\n\n\\node at (0,2) {file1.txt 추가};\n\\node at (3,2) {file1.txt 변경};\n\\node at (3,1.5) {file2.txt 추가};\n\\node at (6,2) {(file1.txt 삭제)};\n\\node at (6,1) {file3.txt 추가};\n\n\\end{tikzpicture}\n\n\\documentclass{standalone}\n\\usepackage{kotex}\n\\usepackage[dvipsnames]{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{arrows.meta}\n\\setmainfont{Noto Sans KR}\n\\begin{document}\n    \\begin{tikzpicture}\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=green!20!lightgray,\n        minimum width=2cm,\n        minimum height=1cm,\n        rounded rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (c1) at (0,0) {c1};\n    \\node (c2) at (3,0) {c2}; \\path (c2) edge (c1);\n    \\node (c3) at (6,0) {c3}; \\path (c3) edge (c2);\n    \\end{scope}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=CornflowerBlue,\n        minimum width=2cm,\n        minimum height=1cm,\n        rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (main) at (6,-2) {main}; \\path (main) edge (c3);\n    \\end{scope}\n\n    \\begin{scope}[\n        every node/.style={\n        draw=black!70,\n        fill=Melon,\n        minimum width=2cm,\n        minimum height=1cm,\n        rectangle,\n        line width=2pt\n    },\n        every edge/.style={\n        draw=black!70,\n        densely dotted,\n        -Triangle,\n        line width=2pt\n    }\n    ]\n    \\node (HEAD) at (6,-4) {HEAD}; \\path (HEAD) edge (main);\n    \\end{scope}\n\n    \\node at (0,2) {file1.txt 추가};\n    \\node at (3,2) {file1.txt 변경};\n    \\node at (3,1.5) {file2.txt 추가};\n    \\node at (6,2) {(file1.txt 삭제)};\n    \\node at (6,1) {file3.txt 추가};\n\n    \\end{tikzpicture}\n\\end{document}"
  },
  {
    "objectID": "git_command.html",
    "href": "git_command.html",
    "title": "git 명령",
    "section": "",
    "text": "git 명령은 크게 기본 명령과 고급 명령으로 나뉜다.\n\n기본 명령 (porcelain command) 70여개\n고급 명령 (plumbing command) 60여개",
    "crumbs": [
      "사용자용 기초",
      "git 명령"
    ]
  },
  {
    "objectID": "git_command.html#기본-명령",
    "href": "git_command.html#기본-명령",
    "title": "git 명령",
    "section": "기본 명령",
    "text": "기본 명령\n\ngit config: 설정\ngit init: 새 저장소를 초기화\ngit clone: 원격 저장소를 복제\ngit add: 변경된 파일을 staging area에 추가\ngit commit: staging된 변경사항을 저장\ngit status: 현재 작업 디렉토리 상태 조회\ngit diff: 변경된 내용 비교\ngit branch: 브랜치 생성/조회\ngit checkout: 브랜치 변경 또는 커밋 탐색\ngit switch: 브랜치 변경\ngit merge: 브랜치 병합\ngit rebase: 커밋 히스토리 재정렬\ngit pull: 원격 저장소에서 변경사항 내려받고 병합\ngit push: 로컬 커밋을 원격 저장소에 업로드\ngit tag: 특정 커밋에 태그 지정\ngit stash: 임시로 변경사항 저장 후 복구 가능하게 보관\ngit cherry-pick: 다른 브랜치 커밋을 현재 브랜치에 적용\ngit bisect: 버그가 생긴 커밋을 찾기 위한 바이너리 검색\ngit blame: 파일 각 줄의 마지막 수정자 및 커밋 확인",
    "crumbs": [
      "사용자용 기초",
      "git 명령"
    ]
  },
  {
    "objectID": "git_command.html#고급-명령",
    "href": "git_command.html#고급-명령",
    "title": "git 명령",
    "section": "고급 명령",
    "text": "고급 명령\n\ngit hash-object: 파일 내용을 Git 오브젝트(blob)로 해시 처리하고, -w 옵션으로 .git/objects 저장\ngit write-tree: 현재 인덱스(staging area)를 기준으로 tree 오브젝트 생성\ngit commit-tree: tree 오브젝트와 메시지를 기반으로 commit 아이템 수동 생성\ngit update-ref: 브랜치 또는 참조(ref)를 특정 커밋 SHA로 갱신\ngit symbolic-ref: HEAD와 같은 reference를 다른 ref로 연결\ngit cat-file: 객체 타입, 크기, 내용을 출력 (e.g. git cat-file -t, -p)\ngit ls-tree: 특정 tree 오브젝트의 디렉토리 항목 나열\ngit ls-files: 인덱스 상태를 저수준 포맷으로 출력 (-s 옵션 포함)\ngit rev-parse: 브랜치 이름, 태그 등 입력을 SHA‑1 해시로 변환\ngit write-tree: 현재 인덱스를 tree 오브젝트로 저장\ngit commit-tree: commit 오브젝트 생성\ngit update-ref: HEAD를 최신 커밋으로 업데이트",
    "crumbs": [
      "사용자용 기초",
      "git 명령"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git Book",
    "section": "",
    "text": "Note작성중\n\n\n\n아직 작성중입니다. 계속 내용을 추가할 예정입니다.",
    "crumbs": [
      "Git Book"
    ]
  },
  {
    "objectID": "internal.html",
    "href": "internal.html",
    "title": "내부 구조",
    "section": "",
    "text": "Pro Git, Git Internels, Git Objects\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Progit/progit.pdf#%5B%7B%22num%22%3A2221%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C0%2C510.57%2Cnull%5D\n\nMastering Git, Ch10 Keeping History Clean, An introduction to Git internals\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Narebski/2024%20-%20Narebski%20-%20Mastering%20Git,%202nd%20Edition.pdf#p263",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#참고-문헌",
    "href": "internal.html#참고-문헌",
    "title": "내부 구조",
    "section": "",
    "text": "Pro Git, Git Internels, Git Objects\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Progit/progit.pdf#%5B%7B%22num%22%3A2221%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C0%2C510.57%2Cnull%5D\n\nMastering Git, Ch10 Keeping History Clean, An introduction to Git internals\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Narebski/2024%20-%20Narebski%20-%20Mastering%20Git,%202nd%20Edition.pdf#p263",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#정보-저장-위치",
    "href": "internal.html#정보-저장-위치",
    "title": "내부 구조",
    "section": "정보 저장 위치",
    "text": "정보 저장 위치\n\n스테이지와 레포지토리 내의 정보는 다음 두 가지 형태로 저장된다.\n\n인덱스(index): 스테이지의 정보 목록을 저장하는 하나의 파일\n객체(object): 스테이지 및 레포지토리의 파일과 디렉토리 내용을 저장하는 복수의 파일들\n\n\n\n\n\n그림: 정보 저장 위치",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#인덱스",
    "href": "internal.html#인덱스",
    "title": "내부 구조",
    "section": "인덱스",
    "text": "인덱스\n\n인덱스는 .git 디렉토리 아래에 index라는 이름으로 저장되는 바이너리 파일이다.\n저장할 파일이 add 명령으로 스테이지에 들어가면\n\n우선 파일의 내용을 블롭 객체라는 형태로 저장하고\n해당 파일에 대한 포인터 정보를 인덱스 엔트리(index entry)라는 형식으로 인덱스 파일에 저장한다.\n\n커밋된 이후에도 인덱스 파일내의 엔트리 정보는 사라지지 않는다.\n\n\n인덱스 엔트리\n\n인덱스 엔트리는 다음과 같은 정보를 포함한다.\n\n워크트리에 있는 실제 파일에 대한 정보\n객체로 저장된 파일내용에 대한 포인터(해시값) 정보",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#객체",
    "href": "internal.html#객체",
    "title": "내부 구조",
    "section": "객체",
    "text": "객체\n\n객체 파일은 파일의 내용 자체 또는 디렉토리의 구조(파일/서브디렉토리 목록) 등을 저장하는 ‘.git/objects’ 디렉토리 아래의 바이너리 파일이다.\n객체 파일의 종류에는 블롭 객체, 트리 객체, 커밋 객체가 있다.\n파일이 add 명령으로 스테이지에 들어가면 파일의 내용은 블롭(blob) 객체 파일에, 디렉토리의 내용은 트리(tree) 객체 파일에 저장된다.\n파일이 commit 명령으로 레포지토리에 기록되면\n\n해당 커밋에 포함되는 디렉토리들의 정보를 저장하는 트리 객체들을 만들고\n이 트리 객체들과 블롭 객체들을 가리키는 포인터(해시) 정보를 포함하는 커밋(commit) 객체가 만들어진다.\n\n\n\n객체 파일의 해시값\n\n모든 객체는 이름(아이디)으로 sha1 해시값 40글자를 가짐\ngit에서 객체를 가리키는 포인터 정보라고 함은 이 해시값을 말한다.\n객체의 종류에 따라 해시 계산 방법이 다름\n\n블롭 객체의 해시값은 파일의 내용만(파일 이름도 사용하지 않음!) 사용하여 계산하므로 파일 내용이 같으면 해시값도 같음\n트리 객체의 해시값은 해당 디렉토리에 있는 파일/서브디렉토리 이름/속성 정보를 사용하여 계산하므로 이 내용이 같으면 해시값도 같음\n커밋 객체의 해시값은 작성자 정보, 작성 시간 정보 등을 통합하여 계산하므로 커밋 내용이 같아도 해시값이 달라질 수 있음\n\n\n\n\n객체 파일의 저장 위치\n\n객체는 .git/objects 디렉토리 아래에 서브디렉토리로 나뉘어서 파일형태로 저장\n디렉토리를 분산하기 위해 40글자 sha1 해시값 중 첫 2글자를 디렉토리 이름으로 하고 나머지 38글자를 파일이름으로 저장\n\n\n\n객체의 저장 형식\n\nzlib으로 압축된 바이너리 파일\n객체를 hex 에디터로 보면 앞부분이 zlib DEFLATE 형식(0x78 0x9C)으로 시작함",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#객체-관련-명령",
    "href": "internal.html#객체-관련-명령",
    "title": "내부 구조",
    "section": "객체 관련 명령",
    "text": "객체 관련 명령\n\n저장소 전체의 객체 목록을 보는 법\ngit cat-file --batch-check --batch-all-objects --unordered\n객체 하나의 유형을 보는 법\ngit cat-file -t 해시값\n객체 하나의 파싱 정보를 보는 법\ngit cat-file -p 해시값\n객체의 내용 정보를 원 바이트열 그대로 보고 싶을 때는 zlib 압축을 풀 수 있는 도구가 있어야 한다.\n\n예를 들어 “qpdf” 애플리케이션을 설치하면 zlib-flate -uncompress 명령으로 객체 내용을 볼 수 있다.\n단, 이 경우에는 바이너리 바이트열을 그대로 보여주므로 콘솔에서 문자로 잘 표시되지 않을 수 있다.",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#실습-1",
    "href": "internal.html#실습-1",
    "title": "내부 구조",
    "section": "실습 1",
    "text": "실습 1\n\n레포지토리 생성\n\n\ncd $HOME/lab\nrm -rf test_internal_01\ngit init test_internal_01\ncd test_internal_01\n\n\n\nInitialized empty Git repository in ~/lab/test_internal_01/.git/\n\n\n\ntree .git\n\n.git\n├── config\n├── description\n├── HEAD\n├── hooks\n│   ├── applypatch-msg.sample\n│   ├── commit-msg.sample\n│   ├── fsmonitor-watchman.sample\n│   ├── post-update.sample\n│   ├── pre-applypatch.sample\n│   ├── pre-commit.sample\n│   ├── pre-merge-commit.sample\n│   ├── pre-push.sample\n│   ├── pre-rebase.sample\n│   ├── pre-receive.sample\n│   ├── prepare-commit-msg.sample\n│   ├── push-to-checkout.sample\n│   ├── sendemail-validate.sample\n│   └── update.sample\n├── info\n│   └── exclude\n├── objects\n│   ├── info\n│   └── pack\n└── refs\n    ├── heads\n    └── tags\n\n9 directories, 18 files\n\n\n\necho \"file1 line1\" &gt; file1.txt\n\n\ngit status -uall\n\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    file1.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n\n\n그림: 비추적 파일 생성\n\n\n\ngit add file1.txt\n\n\ntree .git\n\n.git\n├── config\n├── description\n├── HEAD\n├── hooks\n│   ├── applypatch-msg.sample\n│   ├── commit-msg.sample\n│   ├── fsmonitor-watchman.sample\n│   ├── post-update.sample\n│   ├── pre-applypatch.sample\n│   ├── pre-commit.sample\n│   ├── pre-merge-commit.sample\n│   ├── pre-push.sample\n│   ├── pre-rebase.sample\n│   ├── pre-receive.sample\n│   ├── prepare-commit-msg.sample\n│   ├── push-to-checkout.sample\n│   ├── sendemail-validate.sample\n│   └── update.sample\n├── index\n├── info\n│   └── exclude\n├── objects\n│   ├── 0b\n│   │   └── 11cfca50e35a4865e8505f1a108bd23a3f9401\n│   ├── info\n│   └── pack\n└── refs\n    ├── heads\n    └── tags\n\n10 directories, 20 files\n\n\n\n\n\n그림: 파일 스테이징",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#블롭-객체",
    "href": "internal.html#블롭-객체",
    "title": "내부 구조",
    "section": "블롭 객체",
    "text": "블롭 객체\n\n블롭 객체의 내용\n\n파일의 내용(바이트 스트림)만 저장\n커밋이 아닌 스테이징 시점에 생성되고 커밋되면 트리 객체에서 참조하게 됨\n파일명, 모드, 권한, 타임스탬프 등의 메타데이터 포함하지 않음\n파일명과 모드는 블롭 객체가 아닌 트리 객체에 저장됨\n\n\n\n블롭 객체의 해시값\n\n“blob &lt;바이트길이&gt;\\0&lt;데이터바이트&gt;” 형식의 바이트열을 sha1 계산\n\n\n\n미참조 블롭 (dangling blob)\n\n파일이 스테이징되어 블롭 객체가 생성되었는데 커밋되지 않고 취소가 되면 해당 파일의 블롭 객체는 인덱스 파일이나 다른 객체에게 참조되지 않고 남아있음\n이렇게 아무도 참조하지 않는 블롭 객체를 미참조 블롭(dangling blob)이라고 함\n미참조 블롭 객체가 많으면 디스크 용량을 많이 차지함\n시간이 지나면 자동으로 지워지지만 git gc 명령으로 명시적 삭제 가능",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#실습-2-블롭-객체-조사",
    "href": "internal.html#실습-2-블롭-객체-조사",
    "title": "내부 구조",
    "section": "실습 2: 블롭 객체 조사",
    "text": "실습 2: 블롭 객체 조사\n\ngit cat-file --batch-check --batch-all-objects --unordered\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401 blob 12\n\n\n\ngit cat-file -t 0b11cfca50e35a4865e8505f1a108bd23a3f9401\n\nblob\n\n\n\ngit cat-file -p 0b11cfca50e35a4865e8505f1a108bd23a3f9401\n\nfile1 line1\n\n\n\nzlib-flate -uncompress &lt; \".git/objects/0b/11cfca50e35a4865e8505f1a108bd23a3f9401\"\n\nblob 12file1 line1\n\n\n\nprintf \"file1 line1\\n\" | git hash-object -t blob --stdin\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401\n\n\n\nprintf \"blob 12\\0file1 line1\\n\" | sha1sum\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401  -",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#tree-객체",
    "href": "internal.html#tree-객체",
    "title": "내부 구조",
    "section": "tree 객체",
    "text": "tree 객체\n\n트리 객체는 하나의 디렉토리(서브디렉토리 미포함)에 포함된 파일과 서브디렉토리에 대한 해시값 정보\n서브디렉토리가 존재하면 그에 해당하는 트리 객체가 추가적으로 존재\n\n\n트리 객체의 내용\n\n트리 객체의 내용은 엔트리 열로 구성됨\n엔트리(entry)\n\n하나의 파일 또는 서브디렉토리를 대표하는 정보\n하나의 엔트리 내용은 “&lt;mode&gt; &lt;파일명&gt;\\0&lt;해시값&gt;”\n\n엔트리 열\n\n엔트리 정보를 이어붙인 “&lt;entry&gt;&lt;entry&gt;&lt;entry&gt;...” 형식\n\n하나의 트리 객체 내용은 “tree &lt;크기&gt;\\0&lt;엔트리 열&gt;” 형식\n콘솔에서 정상 표시되지 않는 바이트열을 보고 싶으면 다음 파이썬 코드를 사용한다.\n\n\ncat $HOME/get_tree_object_content.py\n\nimport zlib\nimport sys\nfrom pathlib import Path\n\n\ndef get_tree_object_content(data: bytes) -&gt; bytes:\n    output = bytearray()\n\n    # 기존 헤더 (\"tree &lt;size&gt;\\x00\") 그대로 복사\n    header_end = data.find(b\"\\x00\")\n    output += data[: header_end + 1]\n    i = header_end + 1\n\n    # 각 엔트리 파싱 및 SHA를 .hex()로 변환\n    while i &lt; len(data):\n        mode_end = data.find(b\" \", i)\n        name_end = data.find(b\"\\x00\", mode_end)\n        mode = data[i:mode_end]\n        name = data[mode_end + 1 : name_end]\n\n        sha_start = name_end + 1\n        sha_end = sha_start + 20\n        sha = data[sha_start:sha_end]\n        sha_hex = sha.hex().encode(\"ascii\")\n\n        # 기존 구조 유지\n        output += b\" \" + mode + b\" \" + name + r\"\\0\".encode() + sha_hex\n\n        i = sha_end\n\n    return bytes(output)\n\n\n# .git/objects/xx/yyyyyy 에서 Git object 읽기\npath = Path(\".git\", \"objects\", sys.argv[1][:2], sys.argv[1][2:])\nwith open(path, \"rb\") as f:\n    compressed = f.read()\n    raw = zlib.decompress(compressed)\n\n    result = get_tree_object_content(raw) + b\"\\n\"\n    sys.stdout.buffer.write(result)\n\n\n\n\n트리 객체의 해시값\n\ntree 객체의 내용에 대해 SHA-1을 계산",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#커밋-객체",
    "href": "internal.html#커밋-객체",
    "title": "내부 구조",
    "section": "커밋 객체",
    "text": "커밋 객체\n\n커밋 객체는 커밋 전체의 정보를 저장하는 객체\n해당 커밋 시점의 전체 디렉토리 스냅샷을 저장\n구성 요소\n\n1개의 전역 트리 객체에 대한 해시값 정보\n1개 이상의 부모 커밋 객체에 대한 해시값 정보\n저자 정보 (커밋 시간 정보 포함)\n커미터 정보 (커밋 시간 정보 포함)\n커밋 메시지 정보\n\n시간 정보의 경우 일반적으로는 저자의 커밋 시간과 커미터의 커밋 기간은 동일함\n\n패치 파일을 사용하거나 리베이스, 체리픽 등을 한 경우 달라짐",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "internal.html#실습-3-커밋-객체와-트리-객체-생성",
    "href": "internal.html#실습-3-커밋-객체와-트리-객체-생성",
    "title": "내부 구조",
    "section": "실습 3: 커밋 객체와 트리 객체 생성",
    "text": "실습 3: 커밋 객체와 트리 객체 생성\n\ngit commit -m c1\n\n[main (root-commit) 4199a82] c1\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n\n\n\ngit cat-file --batch-check --batch-all-objects --unordered\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401 blob 12\n4199a828ee48b82acef1032616332e4646f50af7 commit 149\nd6a665ff13b175d407fb943c946c4022017d4dd0 tree 37\n\n\n\ngit cat-file -t d6a665ff13b175d407fb943c946c4022017d4dd0\n\ntree\n\n\n\ngit cat-file -p d6a665ff13b175d407fb943c946c4022017d4dd0\n\n100644 blob 0b11cfca50e35a4865e8505f1a108bd23a3f9401    file1.txt\n\n\n\nzlib-flate -uncompress &lt; \".git/objects/d6/a665ff13b175d407fb943c946c4022017d4dd0\"\n\ntree 37100644 file1.txt\u000b\u0011��P�ZHe�P_\u001a\u0010��:?�\u0001\n\n\n\npython $HOME/get_tree_object_content.py d6a665ff13b175d407fb943c946c4022017d4dd0\n\ntree 37 100644 file1.txt\\00b11cfca50e35a4865e8505f1a108bd23a3f9401\n\n\n\nc1=$(git rev-parse HEAD)\necho $c1\n\n4199a828ee48b82acef1032616332e4646f50af7\n\n\n\ngit cat-file -t $c1\n\ncommit\n\n\n\ngit cat-file -p $c1\n\ntree d6a665ff13b175d407fb943c946c4022017d4dd0\nauthor user &lt;user@company.com&gt; 1755584213 +0900\ncommitter user &lt;user@company.com&gt; 1755584213 +0900\n\nc1\n\n\n\n\n\n그림: 커밋\n\n\n\nmkdir -p sub\necho \"file2 line1\" &gt; sub/file2.txt\ngit add .\n\n\ngit status\n\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    new file:   sub/file2.txt\n\n\n\n\ngit cat-file --batch-check --batch-all-objects --unordered\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401 blob 12\n4199a828ee48b82acef1032616332e4646f50af7 commit 149\n4a8d995103b41f561e547ce3b32e1983d424da22 blob 12\nd6a665ff13b175d407fb943c946c4022017d4dd0 tree 37\n\n\n\n\n\n그림: 추가 파일 add\n\n\n\ngit commit -m c2\n\n[main c6c762a] c2\n 1 file changed, 1 insertion(+)\n create mode 100644 sub/file2.txt\n\n\n\ngit cat-file --batch-check --batch-all-objects --unordered\n\n0b11cfca50e35a4865e8505f1a108bd23a3f9401 blob 12\n4199a828ee48b82acef1032616332e4646f50af7 commit 149\n4a8d995103b41f561e547ce3b32e1983d424da22 blob 12\n4c2cf5eb3d8af11e9fe5f56cb6c853e1559d7166 tree 67\nc6c762a824788dd896d9de6f71135f482d881a00 commit 197\nd6a665ff13b175d407fb943c946c4022017d4dd0 tree 37\ndd62677237dce0946aeffef97910ffc4ec32c3e7 tree 37\n\n\n\ngit cat-file -p $(git rev-parse HEAD)\n\ntree 4c2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\nparent 4199a828ee48b82acef1032616332e4646f50af7\nauthor user &lt;user@company.com&gt; 1755584215 +0900\ncommitter user &lt;user@company.com&gt; 1755584215 +0900\n\nc2\n\n\n\ngit cat-file -p 4c2cf5eb3d8af11e9fe5f56cb6c853e1559d7166\n\n100644 blob 0b11cfca50e35a4865e8505f1a108bd23a3f9401    file1.txt\n040000 tree dd62677237dce0946aeffef97910ffc4ec32c3e7    sub\n\n\n\ngit cat-file -p dd62677237dce0946aeffef97910ffc4ec32c3e7\n\n100644 blob 4a8d995103b41f561e547ce3b32e1983d424da22    file2.txt\n\n\n\n\n\n그림: 두번째 commit",
    "crumbs": [
      "사용자용 기초",
      "내부 구조"
    ]
  },
  {
    "objectID": "reference.html",
    "href": "reference.html",
    "title": "참고문헌",
    "section": "",
    "text": "“Pro Git Book.” 2025. 2025. https://git-scm.com/book/en/v2.",
    "crumbs": [
      "부록",
      "참고문헌"
    ]
  },
  {
    "objectID": "repo.html",
    "href": "repo.html",
    "title": "레포지토리",
    "section": "",
    "text": "레포지토리 정보 등은 체크아웃 디렉렉토리 아래의 .git 디렉토리에 저장된다.",
    "crumbs": [
      "사용자용 기초",
      "레포지토리"
    ]
  },
  {
    "objectID": "repo.html#레포지토리-생성",
    "href": "repo.html#레포지토리-생성",
    "title": "레포지토리",
    "section": "",
    "text": "레포지토리 정보 등은 체크아웃 디렉렉토리 아래의 .git 디렉토리에 저장된다.",
    "crumbs": [
      "사용자용 기초",
      "레포지토리"
    ]
  },
  {
    "objectID": "repo.html#git-디렉토리의-구조",
    "href": "repo.html#git-디렉토리의-구조",
    "title": "레포지토리",
    "section": ".git 디렉토리의 구조",
    "text": ".git 디렉토리의 구조\n\n디렉토리\n\nobjects 디렉토리: 객체 정보 저장 디렉토리. 커밋 등 영구 정보를 저장\nrefs 디렉토리: 참조 정보 저장 디렉토리. 브랜치 등 임시 정보를 저장\nlogs 디렉토리:\ninfo 디렉토리:\nhooks 디렉토리: 훅 파일 저장\n\n파일\n\n텍스트 파일\n\nconfig 파일: 레포지토리 설정 파일\ndescription 파일: 레포지토리 설명 파일\nCOMMIT_EDITMSG 파일: 커밋 메세지 작성용 임시 파일\n\n바이너리 파일\n\nindex 파일: 스테이지 정보 저장\nHEAD 파일: 현재 체크아웃 위치 정보",
    "crumbs": [
      "사용자용 기초",
      "레포지토리"
    ]
  },
  {
    "objectID": "repo.html#레포지토리-설정",
    "href": "repo.html#레포지토리-설정",
    "title": "레포지토리",
    "section": "레포지토리 설정",
    "text": "레포지토리 설정",
    "crumbs": [
      "사용자용 기초",
      "레포지토리"
    ]
  },
  {
    "objectID": "repo.html#객체-정보",
    "href": "repo.html#객체-정보",
    "title": "레포지토리",
    "section": "객체 정보",
    "text": "객체 정보",
    "crumbs": [
      "사용자용 기초",
      "레포지토리"
    ]
  },
  {
    "objectID": "repo.html#참조-정보",
    "href": "repo.html#참조-정보",
    "title": "레포지토리",
    "section": "참조 정보",
    "text": "참조 정보",
    "crumbs": [
      "사용자용 기초",
      "레포지토리"
    ]
  },
  {
    "objectID": "repo.html#로그-정보",
    "href": "repo.html#로그-정보",
    "title": "레포지토리",
    "section": "로그 정보",
    "text": "로그 정보",
    "crumbs": [
      "사용자용 기초",
      "레포지토리"
    ]
  },
  {
    "objectID": "sparse.html",
    "href": "sparse.html",
    "title": "스파스",
    "section": "",
    "text": "Building Git, Ch. 13 Branching Out\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A1460%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D\ncd $HOME/lab\nrm -rf test_sparse_01\ngit init test_sparse_01\ncd test_sparse_01\ncat .git/config\n\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = true\nif result=$(git config --get core.sparseCheckout); then\n  echo result\nelse\n  echo \"실패\"\nfi\n\n실패\ngit sparse-checkout init --no-cone\ncat .git/config\n\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = true\n[extensions]\n    worktreeConfig = true\nif result=$(git config --get core.sparseCheckout); then\n  echo $result\nelse\n  echo \"실패\"\nfi\n\ntrue\nrm -rf .git/config.worktree\nif result=$(git config --get core.sparseCheckout); then\n  echo $result\nelse\n  echo \"실패\"\nfi\n\n실패\ngit sparse-checkout init --no-cone\ncat .git/config.worktree\n\n[core]\n    sparseCheckout = true\n    sparseCheckoutCone = false\ngit sparse-checkout list\n\n/*\n!/*/\nrm -rf .git/info/sparse-checkout\nif result=$(git config --get core.sparseCheckout); then\n  echo $result\nelse\n  echo \"실패\"\nfi\n\ntrue\ngit sparse-checkout set \"/*\"\ngit sparse-checkout list\n\n/*\ntouch file1.txt\ntouch file2.txt\ntouch file3.txt\ntouch file4.txt\ntouch file5.txt\ngit add .\ngit commit -m \"c1\"\n\n[main (root-commit) b00470b] c1\n 5 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 file1.txt\n create mode 100644 file2.txt\n create mode 100644 file3.txt\n create mode 100644 file4.txt\n create mode 100644 file5.txt\ngit checkout\nls\n\nfile1.txt   file2.txt   file3.txt   file4.txt   file5.txt\ngit sparse-checkout list\n\n/*\ngit sparse-checkout set \"\"\ngit sparse-checkout list\ngit checkout\nls -al\n\ntotal 0\ndrwxr-xr-x@  3 joelkim  staff   96 Sep  3 22:34 .\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 ..\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 .git\ngit sparse-checkout set \"\"\ngit sparse-checkout add \"/file1.txt\"\ngit sparse-checkout add \"/file2.txt\"\ngit sparse-checkout list\n\n/file1.txt\n/file2.txt\ngit checkout\nls -al\n\ntotal 0\ndrwxr-xr-x@  5 joelkim  staff  160 Sep  3 22:34 .\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 ..\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 .git\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file1.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file2.txt\ntouch file6.txt\ntouch file7.txt\ntouch file8.txt\ntouch file9.txt\ngit add --sparse .\ngit commit -m \"c2\"\n\n[main 02b2ddb] c2\n 4 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 file6.txt\n create mode 100644 file7.txt\n create mode 100644 file8.txt\n create mode 100644 file9.txt\ngit sparse-checkout list\n\n/file1.txt\n/file2.txt\nls -al\n\ntotal 0\ndrwxr-xr-x@  9 joelkim  staff  288 Sep  3 22:34 .\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 ..\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 .git\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file1.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file2.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file6.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file7.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file8.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file9.txt\ngit checkout\nls -al\n\ntotal 0\ndrwxr-xr-x@  5 joelkim  staff  160 Sep  3 22:34 .\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 ..\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 .git\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file1.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file2.txt\ngit sparse-checkout add \"/file6.txt\"\ngit sparse-checkout add \"/file7.txt\"\ngit sparse-checkout add \"/file8.txt\"\ngit sparse-checkout add \"/file9.txt\"\ngit sparse-checkout list\n\n/file1.txt\n/file2.txt\n/file6.txt\n/file7.txt\n/file8.txt\n/file9.txt\ngit checkout\nls -al\n\ntotal 0\ndrwxr-xr-x@  9 joelkim  staff  288 Sep  3 22:34 .\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 ..\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 .git\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file1.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file2.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file6.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file7.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file8.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file9.txt\ngit sparse-checkout add \"/file10.txt\"\ngit checkout\ngit sparse-checkout list\n\n/file1.txt\n/file2.txt\n/file6.txt\n/file7.txt\n/file8.txt\n/file9.txt\n/file10.txt\nls -al\n\ntotal 0\ndrwxr-xr-x@  9 joelkim  staff  288 Sep  3 22:34 .\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 ..\ndrwxr-xr-x@ 13 joelkim  staff  416 Sep  3 22:34 .git\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file1.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file2.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file6.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file7.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file8.txt\n-rw-r--r--@  1 joelkim  staff    0 Sep  3 22:34 file9.txt"
  },
  {
    "objectID": "sparse.html#참고-문헌",
    "href": "sparse.html#참고-문헌",
    "title": "스파스",
    "section": "",
    "text": "Building Git, Ch. 13 Branching Out\n\nchrome-extension://oemmndcbldboiebfnladdacbdfmadadm/file:///Users/joelkim/Work/study/study_cs/book/DevOps/Coglan/2021%20-%20Coglan%20-%20Buliding%20Git.pdf#%5B%7B%22num%22%3A1460%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C72%2C769.889%2Cnull%5D"
  },
  {
    "objectID": "temp/temp1.html",
    "href": "temp/temp1.html",
    "title": "Git Book",
    "section": "",
    "text": "from git_index_parser import GitIndexParser\n\n\nindex = GitIndexParser.parse_file(\n    path_to_file=\"/Users/joelkim/Work/personal/book_git/lab/test_internal_02/.git/index\"\n)\n\n\ndir(index)\n\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n '_entries',\n '_extensions',\n 'add_entry',\n 'add_extensions',\n 'get_entries',\n 'get_extensions',\n 'sha1',\n 'version']\n\n\n\nfor entry in index.get_entries():\n    print(entry)\n\n&lt;git_index_parser.git_index_file_entry.GitIndexFileEntry object at 0x110ee3080&gt;\n&lt;git_index_parser.git_index_file_entry.GitIndexFileEntry object at 0x110ee30e0&gt;\n\n\n\ndir(entry)\n\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'assume_valid',\n 'ctime_nanoseconds',\n 'ctime_seconds',\n 'dev',\n 'extended',\n 'extra_flags',\n 'flags',\n 'gid',\n 'index',\n 'ino',\n 'intent_to_add',\n 'mode',\n 'mtime_nanoseconds',\n 'mtime_seconds',\n 'name',\n 'reserved',\n 'sha1',\n 'size',\n 'skip_worktree',\n 'stage_one',\n 'stage_two',\n 'uid']\n\n\n\nfor extension in index.get_extensions():\n    print(extension)\n\n&lt;git_index_parser.git_index_file_extension.GitIndexFileExtension object at 0x110eb18b0&gt;\n\n\n\ndir(extension)\n\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'data',\n 'extension_number',\n 'signature',\n 'size']\n\n\n\nextension.signature\n\n'TREE'"
  }
]